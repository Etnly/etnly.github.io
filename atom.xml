<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Etnly&#39;s Blog</title>
  
  <subtitle>Hello,World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gyunch.org/"/>
  <updated>2018-06-29T06:28:27.712Z</updated>
  <id>http://gyunch.org/</id>
  
  <author>
    <name>宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UnityAR详解（UnityARcore）</title>
    <link href="http://gyunch.org/2018/06/29/UnityARcore/"/>
    <id>http://gyunch.org/2018/06/29/UnityARcore/</id>
    <published>2018-06-28T16:00:00.000Z</published>
    <updated>2018-06-29T06:28:27.712Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a><strong>开始前准备</strong></h2><p>开发和测试环境：</p><ul><li>搭载Android 7.0以上的部分安卓机型</li><li>Unity2017.3以上</li></ul><hr><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a><strong>项目流程</strong></h2><p><strong>设置项目</strong></p><ol><li>首先将目标平台换成Android。在Project Settings找 Android Player Settings。并进行如下设置：<br>Other Settings &gt; Multithreaded Rendering： off<br>Other Settings &gt; Minimum API Level: Android 7.0 及以上版本<br>Other Settings &gt; Target API Level: Android 7.0 及以上版<br>XR Settings &gt; ARCore Supported: on</li><li>在场景中添加ARCoreDevice预制件，当ARCore插件导入Unity后，我们可以在当前场景中添加ARCoreDevice。这是ARCore当核心组件，负责Camera图像当采集，以及摄像机位置追踪等功能。</li></ol><p><strong>点云可视</strong></p><ul><li>点云是对于图像上的众多特征点一个比较形象点描述，把这些特征点显示出来可以方便我们的调试。这部分的工作由PointCloud对象中的PointCloudVisualizer.cs脚本完成。点云数据可以从Frame中获得，然后，设置Mesh的顶点和索引，使用MeshTopology.Points的方法绘制出点云视图。</li></ul><p><strong>平面检测和碰撞</strong><br>搭建好基本环境后，就开始关键的一步，在摄像机世界中寻在放置点。ARCore提供了在摄像机世界中进行射线与平面进行碰撞检测的方法，因此，当我们识别出平面后，可以方便的在平面上找到我们的放置点。具体而言，ARCore提供了Session.Raycast的方法来实现射线与平面碰撞检测的功能，并把碰撞点的信息保存在TrackableHit结构中。</p><p><strong>创建锚点及放置物体</strong><br>当找到物体的放置点后，我们需要在摄像机世界中创建我们的物体了。和在完全的世界坐标中创建物体不太一样的是，我们需要先创建一个锚点(Anchor)。这个锚点保存了摄像机当前所理解的物理世界的坐标到Unity世界坐标的映射。所以当物理世界坐标有些变化的时候，锚点也可以感知这样的变化。所以通常我们会先创建锚点，再把创建出来的虚拟物体挂载到锚点下面。</p><p><strong>编译运行</strong><br>通过以上步骤，我们就可以把我们的物体放到摄像机的世界中了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="AR/VR" scheme="http://gyunch.org/tags/AR-VR/"/>
    
  </entry>
  
  <entry>
    <title>UnityAR详解（UnityVuforia）</title>
    <link href="http://gyunch.org/2018/06/29/UnityVuforia/"/>
    <id>http://gyunch.org/2018/06/29/UnityVuforia/</id>
    <published>2018-06-28T16:00:00.000Z</published>
    <updated>2018-06-29T07:05:57.168Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a><strong>开始前准备</strong></h2><p>安装vuforia：<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fsrvi53uyhj30h80ckgn9.jpg" alt=" "></p><hr><h2 id="vuforia游戏对象"><a href="#vuforia游戏对象" class="headerlink" title="vuforia游戏对象"></a><strong>vuforia游戏对象</strong></h2><p>vuforia可以在GameObject菜单中创建<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsrvltmztaj31kw163h1o.jpg" alt=" "></p><hr><h2 id="激活vuforia"><a href="#激活vuforia" class="headerlink" title="激活vuforia"></a><strong>激活vuforia</strong></h2><p>必须在项目中激活Vuforia，然后才能构建Vuforia应用程序<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fsrvojdc4hj31kw0zktzq.jpg" alt=" "><br>勾选右侧Inspector面板中Vuforia Augmented Reality选项</p><hr><h2 id="vuforia的重要文件"><a href="#vuforia的重要文件" class="headerlink" title="vuforia的重要文件"></a><strong>vuforia的重要文件</strong></h2><p><strong>ARCamera</strong>：Vuforia的灵魂，真实世界的显示（调用设备的摄像机），MonoBehavior的接口（Vuforia Behaviour），速度调试（Default Initialization Error Handler）。</p><ol><li><p>World Center Mode：<br>SPECIFIC_TARGET 指定一个物体为世界中心的坐标，此物体必须继承Vuforia Behaviour<br>FIRST_TARGET 摄像机所照射到的第一个需要识别的目标<br>CAMERA 以摄像机为世界中心坐标<br>DEVICE_TRACKING 设备追踪，以设备正在追踪的物体</p></li><li><p>Camera Device Mode(设备的模式)<br>质量优先，优化质量<br>速度优先，优化速度<br>默认的模式，在以上两种间做一个平衡，在没有特殊需求时使用</p></li><li><p>Max Simultaneous Tracked Images 最大追踪识别图片数量<br>为1时，就是无论有多少需要识别的图片，只能一张一张的识别，识别一张后，其它的就不能识别。<br>Max Simultaneous Tracked Objects 同上，只不过是识别物体。</p></li><li><p>Camera Direction 摄像头的方向<br>CAMERA_DEFAULT 默认摄像头，调用系统默认的摄像头<br>CAMERA_BACK 后置摄像头，但是在PC时会调用电脑的前置摄像头<br>CAMERA_FRONT 前置摄像头，会调用PC的后置，但是PC没有后置，所以当调用时GAME视图会黑屏<br>手机正常</p></li><li><p>Digital Eyewear 设备类型<br>Handheld 手持<br>Digital Eyewear 微软眼镜<br>Phone + Viewer MR</p></li><li><p>DataBases 数据库<br>把需要识别的图片上传到数据库中，在下载，导入Unity。<br>建立数据库后，把想被目标识别的物体上传到Target中，之后再根据需要下载不同类型，再导入。<br>ARCamera—Databases下第一个第二个（下载创建的数据库和激活）打钩。</p></li></ol><h2 id="vuforia官方demo解析"><a href="#vuforia官方demo解析" class="headerlink" title="vuforia官方demo解析"></a><strong>vuforia官方demo解析</strong></h2><p>我们首先可以研究一下vuforia的官方unity案例，案例可在Asset Store中下载<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fsrwndoeeyj31kw0xeb29.jpg" alt=" "><br>我们选择Vuforia Core Samples<br>在导入后可以看到，这个案例中有如下场景：<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fss0bj0do0j30ca0e8ta6.jpg" alt=" "><br>这些场景包含了vuforia的所有功能，下面我们一次来介绍这些功能</p><ol><li><p>Cloud Targets（云识别）<br>主要是将Target和其他数据放在云端，或者将相关数据放到自己的服务器端。然后客户端进行获取图像在云端匹配并获取json数据在客户端解析之后，展示出来。</p></li><li><p>Cylinder Targets<br>通过这些demo的名称一般都能看出他们的功能。可以将AR内容放置在圆柱形和圆锥形的物体上。苏打水罐，瓶子和印有图案的管子都是最佳选择。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fss0m9fbaig30dx0gju11.gif" alt=" "></p></li><li><p>Image Targets<br>Image Targets是将AR内容投放在杂志页面，交易卡片和照片等平面物体上的方法。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fss0ng3n1kg30dv0ghb2b.gif" alt=" "></p></li><li><p>Multi Targets<br>是将AR内容放置在可以从多个方面查看或包含多个图像的平坦表面的对象上的方法。产品包装，海报和壁画都是非常好的应用场合。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fss0ojb60kg30dx0gjkjm.gif" alt=" "></p></li><li><p>Object Targets<br>应用于3D对象，在扫描时可以识别和跟踪3D对象。对象识别对几何稳定且具有表面细节的对象起到最佳效果。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fss0pkpk2qg30dv0ghkjp.gif" alt=" "></p></li><li><p>User Defined Targets<br>根据字面意思，这个是用户自定义标识。怎么理解这个呢？当用户拍摄一幅图像时，可以实时将这幅图作为Target使用。当然目前这个功能只适合于2D Image。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fss0vbo419j3074074wex.jpg" alt=" "></p></li><li><p>Virtual Button<br>虚拟按钮</p></li><li><p>VuMarks<br>是自定义设计的AR标记，可以对数据进行编码，以支持ID以及文本和字节数据。VuMarks是识别对象独特部分的方法，该部分可以是一个系列或集合的一部分。它们是解锁玩具和零售产品数字体验的解决方案。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fss0upvcuej30go0d3myp.jpg" alt=" "></p></li></ol><blockquote><p>在最新的Vuforia中，开发者还可以通过Ground Plane将内容附加到水平表面，如地板和桌面，我们也可以通过官方案例Vuforia Ground Plane来学习研究</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fss2855kdaj31kw153b29.jpg" alt=" "></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="AR/VR" scheme="http://gyunch.org/tags/AR-VR/"/>
    
  </entry>
  
  <entry>
    <title>UnityAR详解（UnityARkit）</title>
    <link href="http://gyunch.org/2018/06/28/UnityARkit/"/>
    <id>http://gyunch.org/2018/06/28/UnityARkit/</id>
    <published>2018-06-27T16:00:00.000Z</published>
    <updated>2018-06-29T10:43:04.325Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a><strong>开始前准备</strong></h2><p>开发和测试环境：</p><ul><li>Apple系列电脑MacOS10.13以上</li><li>Xcode9.3</li><li>支持ARKit并具有ios11.3以上的ios设备</li><li>unity2017.1以上</li></ul><p>首先我们需要在Asset store中下载Unity ARKit Plugin<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fsru7r80swj31kw0yvb13.jpg" alt=" "></p><hr><h2 id="Unity-ARKit-Plugin介绍"><a href="#Unity-ARKit-Plugin介绍" class="headerlink" title="Unity ARKit Plugin介绍"></a><strong>Unity ARKit Plugin介绍</strong></h2><ol><li><strong>什么是Unity ARKit Plugin</strong><br>Unity ARKit Plugin中可以让我们在Unity项目中轻松使用几乎所有的ARKit SDK功能。这个插件向Unity开发者提供了ARKit SDK中的多个主要功能，如世界追踪，渲染相机的视频捕捉，平面检测及更新，特征点云提取，光线评估和hit 测试等等。</li></ol><p>ARkit结构图<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsojh4fcu5j30u40fiwhi.jpg" alt=""></p><ol start="2"><li><strong>ARKit Plugin中的示例场景</strong><br>在ARKit Plugin中，有如下示例场景，大家可以自行测试<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsruaamawjj30c80aumy9.jpg" alt=" "></li></ol><p>Unity-ARKit官方提供的demon展示功能和特性解析，根据官方介绍、演示的Demon和研究实践，Unity-ARKit主要涉及到的技术有：<br>1).世界跟踪<br>初始化时ARKit会生成一个三维的世界坐标系(相当于unity的坐标系)，定义原点(0，0，0)即为初始的ARKit摄像机对应的位置点。其他虚拟的物体空间坐标点都可以参考此为世界坐标原点进行规划。</p><p>2).实时视频渲染<br>ARKit默认打开设备的摄像头，可以在展示现实场景的同时渲染展示虚拟物体，如图展示的现实场景与虚拟场景结合效果。并且摄像头会把当前实时画面数据传输到ARKit SDK中进行处理，SDK处理功能包括识别返回较小特征点(feature points)数据、识别返回平面数据、识别返回环境光数据，并且这些数据是实时更新获取的，根据这些数据和功能我们就可以与unity游戏相结合，实现AR产品和创意。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fss82hfrbzj30cq09at9n.jpg" alt=" "></p><p>3).平面估计和更新（核心特色）<br>摄像头会把当前实时画面数据传输到ARKit SDK中进行处理后，相关API可以获取生成的平面数据，如：平面在空间坐标矩阵的位置，大小，方向等。并且摄像机在不断扫描平面或物体时，平面的数据信息会不断更新和融合，ARKit可以扫描和生成多个平面，多个平面在扫描当中如确定是同一平面，它会把多个平面合并成一整块平面，<strong>如图</strong>。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fss80e0kh8j306r0b7q6f.jpg" alt=" "></p><p>4).命中测试的API<br>在摄像机开启时，ARKit可以识别特征点（现实物体的平面点），图中的黄色点。示例中点击手机摄像机中的现实物体可以放置虚拟物体在平面上（不至于悬空），<strong>如图</strong>。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fss81iwca1j309g0fi114.jpg" alt=" "></p><p>5).环境光估计<br>ARKit可以收集摄像机现实的光源信息并返回，所以调用相关API表现为虚拟物体随着现实化境的光照强度改变，它会变亮或产生阴影。</p><ol start="3"><li><strong>ARKit Plugin中的重要文件</strong><br>在ARKit Plugin中有几个非常重要的文件，<a href="https://developer.apple.com/documentation/arkit?changes=latest_minor&amp;language=objc" target="_blank" rel="noopener">具体参考</a>，这里举例介绍：</li></ol><ul><li><p>ARSessionNative.mm</p><blockquote><p>/Plugins/iOS/UnityARKit/NativeInterface/ARSessionNative.mm<br>该文件是用于跟ARKit SDK实际交互的Objective-C代码  </p></blockquote></li><li><p>UnityARSessionNativeInterface.cs</p><blockquote><p>/Plugins/iOS/UnityARKit/NativeInterface/UnityARSessionNativeInterface.cs<br>该文件提供了到ARKit的脚本API，同时也提供了对于原生代码的解释说明。<br>其中包含以下API：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void RunWithConfigAndOptions(ARKitWorldTackingSessionConfiguration config, UnityARSessionRunOption runOptions)</span><br><span class="line">public void RunWithConfig(ARKitWorldTackingSessionConfiguration config)</span><br><span class="line">public void Pause()</span><br><span class="line">public List&lt;ARHitTestResult&gt; HitTest(ARPoint point, ARHitTestResultType types)</span><br><span class="line">public ARTextureHandles GetARVideoTextureHandles()</span><br><span class="line">public float GetARAmbientIntensity()</span><br><span class="line">public int GetARTrackingQuality()</span><br><span class="line"></span><br><span class="line">此外其中也包含了一些可以提供代理的事件：</span><br><span class="line"></span><br><span class="line">public delegate void ARFrameUpdate(UnityARCamera camera)</span><br><span class="line">public delegate void ARAnchorAdded(ARPlaneAnchor anchorData)</span><br><span class="line">public delegate void ARAnchorUpdated(ARPlaneAnchor anchorData)</span><br><span class="line">public delegate void ARAnchorRemoved(ARPlaneAnchor anchorData)</span><br><span class="line">public delegate void ARSessionFailed(string error)</span><br><span class="line"></span><br><span class="line">以及我们可以订阅的事件列表：</span><br><span class="line"></span><br><span class="line">public static event ARFrameUpdate ARFrameUpdatedEvent;</span><br><span class="line">public static event ARAnchorAdded ARAnchorAddedEvent;</span><br><span class="line">public static event ARAnchorUpdated ARAnchorUpdatedEvent;</span><br><span class="line">public static event ARAnchorRemoved ARAnchorRemovedEvent;</span><br><span class="line">public static event ARAnchorAdded ARUserAnchorAddedEvent;</span><br><span class="line">public static event ARAnchorUpdated ARUserAnchorUpdatedEvent;</span><br><span class="line">public static event ARAnchorRemoved ARUserAnchorRemovedEvent;</span><br><span class="line">public static event ARSessionCallback ARSessionInterruptedEvent;</span><br><span class="line">public static event ARSessionCallback ARSessioninterruptionEndedEvent;</span><br><span class="line">public static event ARSessionTrackingChanged ARSessionTrackingChangedEvent;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>在NativeInterface文件夹中，以AR开头的cs文件是和ARKit中所提供的数据结构相对应的API</p></li><li><p>UnityARAnchorManager.cs</p><blockquote><p>/Plugins/iOS/UnityARKit/Helpers/UnityARAnchorManager.cs<br>该文件用于管理ARKit中的anchor更新信息，并据此创建相对应的Unity游戏对象  </p></blockquote></li><li><p>UnityARCameraManager.cs</p><blockquote><p>/Plugins/iOS/UnityARKit/Helpers/ UnityARCameraManager.cs<br>该组件应该被放置在场景的游戏对象上，代表想要通过ARKit来控制的摄像机。它会基于ARKit的更新来控制摄像机的位置和旋转角度，并提供投射矩阵。<br>该组件中还包含了用于初始化ARKit 进程的代码。  </p></blockquote></li><li><p>UnityARVideo.cs</p><blockquote><p>/Plugins/iOS/UnityARKit/Helpers/UnityARVideo.cs<br>该组件应该放置在摄像机上，以抓取用于渲染视频的纹理，并将其设置在用于backbuffer的材质上，同时还将设置用于完成blit的<a href="https://docs.unity3d.com/Manual/GraphicsCommandBuffers.html" target="_blank" rel="noopener">Command Buffers</a>  </p></blockquote></li><li><p>UnityARUserAnchorComponent.cs</p><blockquote><p>/Plugins/iOS/UnityARKit/Helpers/UnityARUserAnchorComponent.cs<br>该组件将基于其所依附的游戏对象的生命周期，从ARKit中添加和删除Anchor。  </p></blockquote></li><li><p>UnityARCameraNearFar</p><blockquote><p>/Plugins/iOS/UnityARKit/Helpers/UnityARCameraNearFar<br>获取相机的距离，更新far和near，剪裁平面，物体和相机距离小于最近和大于最远都看不到  </p></blockquote></li><li><p><strong>在ARkit2.0的最新更新中，还加入了许多实用的新功能：</strong></p></li></ul><blockquote><p>1.在最新的arkit2.0中，加入了全新的USDZ文件格式，该文件格式由苹果与Adobe共同推出，同时ARkit也将于Valve合作，从而增加Mac对 SteamVR的支持。</p></blockquote><blockquote><p>2.加入了ARWorldMap技术，ARWorldMap是ARKit 2一个非常有用的新功能，可支持AR体验的持续性和多人AR体验。随着你移动并检测到更多的特征点，每次会话都将建立一个ARWorldMap。你可以从C＃的会话中获取当前的ARWorldMap，并将其保存到Application.persistence DataPath上的某个位置。你同时可以从保存的地方加载保存的ARWorldMap。这允许虚拟对象维持在相同的坐标空间中。ARWorldMap可以序列化为一个字节数组，并通过WiFi，蓝牙或其他共享方式发送至另一台设备。它同时可以反序列化，并用于将其他设备重新定位到与第一个设备相同的世界映射，这样你就可以拥有一种共享的多人游戏体验。无论通过加载，还是说从另一个设备接收，一旦拥有了ARWorldMap，设备就可以利用这个ARWorldMap共享坐标系，方法是将其设置为配置中的参数，并使用这个配置来重置ARSession。这将重设会话，而随着你的移动，它将尝试匹配ARWorldMap中的特征点与其在环境中检测到的特征点。当彼此匹配时，它将重新定位你的设备坐标，从而匹配保存在ARWorldMap中的坐标。</p></blockquote><blockquote><p>3.ARReferenceObjectandARObjectAnchor，与ARKit1.5中用于图像识别的ARReferenceImage和ARImageAnchor类似，我们现在有了ARReferenceObject和ARObjectAnchor来进行对象识别。</p></blockquote><blockquote><p>4.UnityARObjectAnchor，这个示例假设你已经拥有了.arobject文件来描述希望识别的对象。你可以通过下面介绍的UnityObjectScanner示例，或者是苹果的ARKit Object Scanner应用程序来创建.arobject文件，这两者都可以生成相同格式的文件。与ARReferenceImage非常相似，我们将设置一个ARReferenceObjectsSetAsset，它包含对ARReferenceObjectAssets的引用。接下来，我们将为ARSession的配置添加对ARReferenceObjectsSetAsset的引用，从而在会话中尝试检测集合中的ARReferenceObjects。所有这一切都可以通过Unity Editor来完成。每当识别出一个对象时，系统将创建一个ARObjectAnchor，而就像是其他锚定一样，你可以订阅一个告诉你什么时候添加，更新或删除了锚定的活动。当活动触发时，你可以自行决定要执行的操作（比如在这个位置创建一个预制件）。</p></blockquote><blockquote><p>5.UnityObjectScanner，Examples/ARKit2.0/UnityARObjectScanner/UnityARObjectScanner.unity是一个更为完整的示例，它既可使用可选边界框来创建对象，也使用进行对象检测。你可以保存使用该示例扫描的.arobjects，然后使用iTunesFileSharing将它们传输至Mac。当文件出现在Mac时，你就可以重命名它们，然后再放入Unity项目之中。这个示例有不同的模式：扫描模式和检测模式。对于扫描模式，我们菜肴能够ARKitObjectScanningSessionConfiguration，这将能对场景进行更为详细的探索，但会使用更多的CPU和功率。利用这个配置，对于你希望扫描的对象，你可以轻触其附近的平面以生成一个红色的边界框。你可以操作方框来覆盖目标对象。接下来，扫描方框的周围，尽可能多地获取对象上的特征点。然后通过轻触按钮来创建一个ARReferenceObject。创建的对象将保存到一个列表中。按下Detect按钮将进入检测模式，而这个模式的工作原理与上面的对象锚定示例类似，但采用一种将arreferenceobject动态添加到被检测对象列表中的函数。按下Save按钮，将至今扫描到的所有对象都保存至设备上的文件夹。这会把它们保存为.arobjects，并可以使用iTunesFileSharing将它们传输到Mac上。当文件出现在Mac后，你就可以重命名它们，然后再放到Unity项目中。</p></blockquote><blockquote><p>6.AREnvironmentProbeAnchor，AREnvironmentProbeAnchor是一种新的锚定，它可以自动生成，而你也可以指定在哪里创建它。这个锚定将根据ARKit视频帧和世界追踪数据来创建，并更新区域的反射环境映射。它同时采用了机器学习算法，对尚未看到的场景部分近似算出环境纹理。<br>会话配置中有一个新的参数来控制这个功能，而它将有以下三个值中的一个:UnityAREnvironmentTexturingNone、UnityAREnvironmentTexturingManual或UnityAREnvironmentTexturingAutomatic。对于UnityAREnvironmentTexturingManual模式，你必须自行创建一个AREnvironmentProbeAnchor，但ARKit将更新从环境中捕获的纹理。如果你使用的是UnityAREnvironmentTexturingAutomatic模式，ARKit将根据它从会话中输入的数据和你在空间中的运动，以空间间隔地生成AREnvironmentProbeAnchor。这两个示例都生成一个包含Unity ReflectionProbe组件的预制件，并使用来自AREnvironmentProbeAnchor的环境纹理更新它。这个ReflectionProbe现在加入至标准的Unity渲染管道，并将增强使用它的任何GameObject。</p></blockquote><blockquote><p>7.图像追踪，参考图像与ARKit 1.5中的工作原理相同，但现在ARKit不仅只是识别图像，它同时允许你追踪它们:当你移动参考图像时，与它们相关的ARImageAnchor将与图像一起移动，这样你就可以移动与这些移动图像锚定的内容。会话配置中有一个额外的参数，它可以通过说明你希望在会话期间同时追踪多少图像来实现这一点。现有的示例已经进行了更新以支持使用这个新功能。</p></blockquote><blockquote><p>8.面部追踪优化，ARKit 2同时优化了iPhoneX的人脸追踪功能。首先，有一个名为TongueOut的额外混合变形系数。取决于ARKit2人脸追踪所能感知的舌头伸出程度，这将返回0.0到1.0之间的值。苹果在WWDC上展示了他们的Animojis，而这看起来很受观众的欢迎。另一项改进是，它现在可以追踪眼睛注视点。你会接收到一个描述每只眼睛指向的变换，以及注视对象的位置。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="AR/VR" scheme="http://gyunch.org/tags/AR-VR/"/>
    
  </entry>
  
  <entry>
    <title>UnityAR介绍</title>
    <link href="http://gyunch.org/2018/06/26/UnityARBasics/"/>
    <id>http://gyunch.org/2018/06/26/UnityARBasics/</id>
    <published>2018-06-25T16:00:00.000Z</published>
    <updated>2018-06-29T10:25:45.415Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="AR"><a href="#AR" class="headerlink" title="AR"></a><strong>AR</strong></h2><p>AR体验的基本需求，是在用户所处的现实世界空间与可视化建模内容的虚拟空间之间创建对应关系的能力。当应用程序显示虚拟内容与实时摄像头图像，用户会感受到现实的增强：产生虚拟内容是真实世界的一部分的感觉。其将真实世界信息和虚拟世界信息“无缝”集成的新技术，是把原本在现实世界的一定时间空间范围内很难体验到的实体信息(视觉信息,声音,味道,触觉等),通过电脑等科学技术，模拟仿真后再叠加，将虚拟的信息应用到真实世界，被人类感官所感知，从而达到超越现实的感官体验。真实的环境和虚拟的物体实时地叠加到了同一个画面或空间同时存在。</p><p>AR技术，不仅展现了真实世界的信息,而且将虚拟的信息同时显示出来，两种信息相互补充、叠加。在视觉化的增强现实中，用户利用头盔显示器，把真实世界与电脑图形多重合成在一起，便可以看到真实的世界围绕着它。</p><p>AR技术包含了多媒体、三维建模、实时视频显示及控制、多传感器溶合、实时跟踪及注册、场景融合等新技术与新手段。增强现实提供了在一般情况下，不同于人类可以感知的信息。</p><p><strong>主要特点</strong></p><ol><li>真实世界和虚拟世界的信息集成；</li><li>具有实时交互性；</li><li>是在三维尺度空间中增添定位虚拟物体。</li></ol><blockquote><p>AR技术可广泛应用到军事、医疗、建筑、教育、工程、影视、娱乐等领域。</p></blockquote><p><strong>应用领域</strong></p><p>AR技术不仅在与VR技术相类似的应用领域，诸如尖端武器、飞行器的研制与开发、数据模型的可视化、虚拟训练、娱乐与艺术等领域具有广泛的应用，而且由于其具有能够对真实环境进行增强显示输出的特性，在医疗研究与解剖训练、精密仪器制造和维修、军用飞机导航、工程设计和远程机器人控制等领域，具有比VR技术更加明显的优势。</p><ul><li><p>医疗领域：医生可以利用增强现实技术，轻易地进行手术部位的精确定位。</p></li><li><p>军事领域：部队可以利用增强现实技术，进行方位的识别，获得实时所在地点的地理数据等重要军事数据。</p></li><li><p>古迹复原和数字化文化遗产保护：文化古迹的信息以增强现实的方式提供给参观者，用户不仅可以通过HMD看到古迹的文字解说，还能看到遗址上残缺部分的虚拟重构。</p></li><li><p>工业维修领域：通过头盔式显示器将多种辅助信息显示给用户，包括虚拟仪表的面板、被维修设备的内部结构、被维修设备零件图等。</p></li><li><p>网络视频通讯领域：该系统使用增强现实和人脸跟踪技术，在通话的同时在通话者的面部实时叠加一些如帽子、眼镜等虚拟物体，在很大程度上提高了视频对话的趣味性。</p></li><li><p>电视转播领域：通过增强现实技术可以在转播体育比赛的时候实时的将辅助信息叠加到画面中，使得观众可以得到更多的信息。</p></li><li><p>娱乐、游戏领域：增强现实游戏可以让位于全球不同地点的玩家，共同进入一个真实的自然场景，以虚拟替身的形式，进行网络对战。</p></li><li><p>旅游、展览领域：人们在浏览、参观的同时，通过增强现实技术将接收到途经建筑的相关资料，观看展品的相关数据资料。</p></li><li><p>市政建设规划：采用增强现实技术将规划效果叠加真实场景中以直接获得规划的效果。</p></li></ul><p><strong>工作原理</strong></p><p>移动式增强现实系统的早期原型增强现实的基本理念是将图像、声音和其他感官增强功能实时添加到真实世界的环境中。听起来十分简单。而且，电视网络通过使用图像实现上述目的不是已经有数十年的历史了吗？的确是这样，但是电视网络所做的只是显示不能随着摄像机移动而进行调整的静态图像。增强现实远比电视广播中见到的任何技术都要先进，尽管增强现实的早期版本一开始是出现在通过电视播放的比赛和橄榄球比赛中，例如Racef/x和添加的第一次进攻线，它们都是由SporTVision创造的。这些系统只能显示从一个视角所能看到的图像。下一代增强现实系统将显示能从所有观看者的视角看到的图像。</p><p>在各类大学和高新技术企业中，增强现实还处于研发的初级阶段。最终，可能到这个十年结束的时候，我们将看到第一批大量投放市场的增强现实系统。有研究者将其称为“21世纪的随身听”。增强现实要努力实现的不仅是将图像实时添加到真实的环境中，而且还要更改这些图像以适应用户的头部及眼睛的转动，以便图像始终在用户视角范围内。下面是使增强现实系统正常工作所需的三个组件：</p><ol><li><p>头戴式显示器</p></li><li><p>跟踪系统</p></li><li><p>移动计算能力</p></li></ol><p>增强现实的开发人员的目标是将这三个组件集成到一个单元中，放置在用带子绑定的设备中，该设备能以无线方式将信息转播到类似于普通眼镜的显示器上。</p><p><strong>设备及组件</strong><br>如今国内外已经有很多厂商在研发AR技术而比较出色的，应当属于apple、google和微软和高通。<br>Google的glass和微软的HoloLens应该算是真正意义实现ar的设备，也是当今最好的ar设备之二，据传，apple也在开发自己的ar眼睛设备。<br>组件方面，apple的arkit、google的arcore和高通的vuforia也将会是未来的潮流。</p><ul><li>以下列举国内外市面常见的AR组件（因为arkit和arcore面世时间较短，现在还很少使用在商业中）：</li></ul><table><thead><tr><th></th><th>Wikitude</th><th>vuforia</th><th>EasyAR(国内)</th><th>VoidAR（国内）</th></tr></thead><tbody><tr><td>识别卡识别</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>3D物体识别</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>云识别</td><td>支持</td><td>支持</td><td></td><td>支持</td></tr><tr><td>SLAM</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>GPS</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>传感器</td><td>支持</td><td>支持</td><td></td></tr></tbody></table><hr><h2 id="UnityAR"><a href="#UnityAR" class="headerlink" title="UnityAR"></a><strong>UnityAR</strong></h2><p>在unity中有数种ar插件，如apple的ARkit、google的 ARcore及高通vuforia等，这里我们主要来了解<strong>vuforia</strong>、<strong>ARkit</strong>、<strong>ARcore</strong>以及unity官方跨平台的<strong>AR Foundation</strong>。</p><h2 id="ARkit"><a href="#ARkit" class="headerlink" title="ARkit"></a><strong>ARkit</strong></h2><p>ARKit是苹果在2017年WWDC推出的AR开发平台。开发人员可以使用这套工具iPhone和iPad创建增强现实应用程序。</p><blockquote><p>在unity中，可以通过Asset Store下载ARkit插件  </p></blockquote><ul><li><p><strong>VIO 视觉惯性测距(Visual-inertial Odometry)</strong><br>为了在真实空间和虚拟空间之间创建对应关系，ARKit使用一种称为视觉惯性测距的技术。该过程会将iOS设备的运动感应硬件捕捉的信息（CoreMotion）与设备相机可见的场景的计算机视觉分析相结合。</p></li><li><p><strong>ARKit的场景理解系统和光照估计(Scene understanding and Lighting Estimation)</strong></p></li></ul><ol><li><p>平面寻找：使用稀疏点云提取和创建平面</p><blockquote><p>PrefabsGeneratePlanes 和UnityARGeneratePlane.cs 可以生成平面。该脚本监听平面并检测更新，再为检测到的每个平面创建一个新平面的实例。  </p></blockquote></li><li><p>碰撞检测：针对点云和平面射线碰撞检测</p><blockquote><p>ARKit SDK分析相机视图中的内容，并根据可识别的功能和估计的深度确定点数。碰撞结果按照与设备的距离进行排序。平面优先于feature point  </p></blockquote></li><li><p>光照估计：估计当前摄像机的环境光值，以便用真实世界的光照亮数字物体</p><blockquote><p>ARKit SDK提供了对当前摄像机视图ambient light（环境光）的估计。通过将ARKit值在UnityARAmbient.cs中统一转换为更合适的强度来调整场景中单位光的亮度（通常为Directional Light）。这允许应用程序用真实世界的光来照亮场景中的对象。  </p></blockquote></li></ol><ul><li><strong>设置场景</strong><br>UnityARkit基本设置由三个脚本组成：</li></ul><ol><li><p>ARCameraManager.cs ：设置MainCamera的local position</p><blockquote><p>在使用中不需要手动设置摄像机的位置，该脚本将自动设置摄像机的相应方向和位置  </p></blockquote></li><li><p>UnityARVideo.cs ：从设备摄像机读取视频</p><blockquote><p>确保将相机的清除颜色设置为alpha = 0  </p></blockquote></li><li><p>UnityARCameraNearFar.cs ：更新Far和Near</p></li></ol><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>如果需要碰撞检测速度更快，而不是更高的精度，您可以使用Feature points，而不是平面检测。</li><li>获得所需结果后，禁用平面检测。平面检测需要的计算量更大。因为放置在场景中的对象不需要一直做平面检测，所以在获得结果以后可以禁用平面检测。</li><li>允许在应用中重置ARKit会话m_session.RunWithConfigAndOption(config, option)，option可以重置上次会话。</li><li>使用shadowPlanePrefab在平面和现实世界中投射阴影，这将在您的AR应用程序中产生更有说服力的效果，如果表现是您的关注，您也可以使用Blob Projector。</li><li>使用真实世界大小。Unity中的1个单位表示一米，在放置对象和创作内容时需要考虑到这一点。如果您的物体Transform的Scale设置为10，出现多大的对象肯定会让您感到惊讶！</li><li>考虑对象交互 - ARkit只有几个简单的功能可以使用，沿着放置的平面移动物体，游戏或应用在手机和平板电脑上运行，最佳做法是使用触摸手势。</li><li>使用ARkit Remote加速您的开发</li></ul><hr><h2 id="ARcore"><a href="#ARcore" class="headerlink" title="ARcore"></a><strong>ARcore</strong></h2><p>ARCore是谷歌推出用来在Android上搭建增强现实应用程序的软件平台，类似苹果的ARKit。我们在里面使用了三项关键技术来整合虚拟内容和现实世界：</p><ol><li><strong>运动跟踪技术</strong>让手机能够通过传感器和相机，感知并追踪自身在环境中的相对位置；</li><li><strong>环境理解技术</strong>让手机可以侦测到水平面，如地表或餐桌；</li><li><strong>光照强度估测技术</strong>使用手机的环境光传感器可以估量当前环境的光照情况。</li></ol><p>简单来说的话，ARCore 其实只做两件事：</p><ul><li>在移动设备移动时追踪它们的位置；</li><li>逐渐用自己的方式对现实世界进行理解。</li></ul><hr><h2 id="AR-Foundation"><a href="#AR-Foundation" class="headerlink" title="AR Foundation"></a><strong>AR Foundation</strong></h2><p>在 apple的ARKit与google的ARCore两大AR平台出现之后，不少开发者陷入两难之中，毕竟要开发兼容两大平台的应用确实更费时费力。为了缓解这一问题， Unity为手机AR推出跨平台开发工具——  <a href="https://github.com/Unity-Technologies/arfoundation-samples" target="_blank" rel="noopener">AR Foundation</a>。</p><p>Unity表示，“我们一直站在手持式AR开发的前沿，我们从一开始就支持ARCore和ARKit。但借助AR Foundation及其利用的软件架构，我们现在可以为开发者提供一个支持ARCore，ARKit和未来平台核心功能的通用API。”<br>AR Foundation已经通过Package Manager集成至Unity，所以你可以轻松将其集成至你的新项目之中。Unity专注于为AR Foundation增加对新功能和平台的支持。同时，他们将继续支持特定于平台，开发者希望在现有项目中使用的插件。</p><p>AR Foundation的初始版本将为大多数AR应用的核心功能提供支持：</p><ul><li>平整表面检测</li><li>表示为点云的深度数据</li><li>高效的pass-thru渲染</li><li>有助于将虚拟对象锚定到物理世界的参考点</li><li>估计平均色温和亮度</li><li>追踪物理空间中的设备位置和方向</li><li>在AR中正确缩放内容的实用程序</li><li>针对平面和深度数据的光线投射</li><li>这一功能集仅仅只是开始。AR Foundation将继续增加对新平台功能和实用程序的支持，同时保持向后兼容性。</li></ul><p><a href="https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@1.0/api/UnityEngine.XR.ARFoundation.html" target="_blank" rel="noopener">AR Foundation API参阅</a></p><hr><h2 id="vuforia"><a href="#vuforia" class="headerlink" title="vuforia"></a><strong>vuforia</strong></h2><p><a href="https://www.vuforia.com" target="_blank" rel="noopener">Vuforia</a>是与高通公司的合作产品，致力于虚拟现实的技术。VR和AR的结合在Android端和iOS端表现效果相当不错，并且可以通过终端自带的摄像头进行虚拟现实，同时支持VR和AR的交互工作，达到体验不输给传感器的效果。</p><p>Unity2017.3平台开始全面支持Vuforia 7。通过Unity编辑器，开发人员可以直接将各种各样的实物、环境与 3D 图像混合，从而开发出跨平台的AR应用</p><p>Vudoria也是当今AR行业使用最广的方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="AR/VR" scheme="http://gyunch.org/tags/AR-VR/"/>
    
  </entry>
  
  <entry>
    <title>Mac及应用介绍</title>
    <link href="http://gyunch.org/2018/06/01/Macintroduce/"/>
    <id>http://gyunch.org/2018/06/01/Macintroduce/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-04T16:25:39.685Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><ul><li><p>从最初在我第二个东家接触MacMini以来，到之后因为太穷只买得起的MacBookAir，再到现在的MacBookPro和Imac，使用Mac已经五年有余。资深说不上，至少也是熟练掌握mac使用技巧😅😅。</p></li><li><p>之前逛知乎经常看到类似“Mac和Windows孰优孰劣”、“Mac上xxx的软件哪个好”或者是“Mac上有什么类似Windowsxxx的应用”以及“为什么要使用Mac做xxx”。 我是个懒人，算是知乎的重度用户，但基本没有回答过问题，可有时候看到自己熟悉的话题又总想写点什么，打了几个字后发现还有这么多字要打真麻烦，就关掉这个问题去看下一个。所以为了一劳永逸，顺便还能推广下我的博客，就有了今天这篇文章。</p></li></ul><hr><h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a><strong>Mac</strong></h1><ul><li>首先来介绍Mac的产品。</li><li>苹果现在的Mac系列产品线包括 MacBook、MacBookAir、MacBookPro、iMac、 iMacPro、MacPro、MacMini<blockquote><p>如果说购买推荐，当然还是要依据使用场景来衡量。MacBook和MacBookAir适合移动办公。iMac是一台显示器逆天颜值逆天的一体机。iMacPro我是真的很推荐定制顶配的这款机器（同时拥有它也是我的梦想）。MacPro是一台性能超强大的专业台式机。Macmini算是性价比最高的mac，也是使用mac的公司和学校最偏爱的机型。最后是MacBookPro，它是mac系列的中坚力量，便于携带且性能强大，如果你想追求更强的性能、更好的体验、更清晰的画质，那我推荐购买最新版顶配的MacBook Pro。 </p></blockquote></li></ul><hr><h1 id="Mac和Windows"><a href="#Mac和Windows" class="headerlink" title="Mac和Windows"></a><strong>Mac和Windows</strong></h1><ul><li>再从“Mac和Windows孰优孰劣”说起。<blockquote><p>在知乎上关于这个问题的答案，大致总结一下就是从审美、稳定度、生态、性能、开放程度和应用等方面来对比。<br>但对于这个问题我并不想回答，唯一能让大家接受的回答也就只有“从系统而言两者互有优劣”，毕竟两者一个是一体化电脑，一个是操作系统，从性能、稳定程度、应用场景、兼容性这些方面本就不具备可比性，但如果有说windows跑在mac的硬件上会更加稳定流畅的，那你买个mac装windows好了。<br>而单从系统方面而言，这真的就是一个见仁见智的问题。<br>在这些对比中，最为突出的就是应用问题，在windows上有太多耳熟能详的软件，并且拥有着vs、office这些强大到不可替代的官方应用。而随着MacOS上AppStore日渐衰落，大多使用mac的一般用户很难找到windows软件的代替平或者更加好用的应用。<br>所以在下面，我主要介绍一下mac上我常用到或了解过好用的应用。  </p></blockquote></li></ul><hr><h1 id="Mac应用介绍"><a href="#Mac应用介绍" class="headerlink" title="Mac应用介绍"></a><strong>Mac应用介绍</strong></h1><h2 id="开发："><a href="#开发：" class="headerlink" title="开发："></a><strong>开发：</strong></h2><ul><li><p><strong>Xcode</strong></p><blockquote><p>Mac上优秀的集成开发工具，几乎所有的mac app和ios app都是由此而生。如果使用mac做开发，那Xcode是你必不可少的工具之一。  </p></blockquote></li><li><p><strong>JetBrains系列</strong></p><blockquote><p>产品线非常丰富且功能强大，几乎都是精品，Java、Python、Ruby、Php、Web一应俱全，而我常用的JetBrains系列有用于Python开发的<strong>Pycharm</strong>，用于Lua开发的<strong><a href="http://gyunch.org/2016/07/04/Lua%E5%9F%BA%E7%A1%80/">Intellij+EmmyLua</a></strong>（在之前关于Lua教程的文章中有写到），用于Web开发的<strong>WebStorm</strong>。<br>但是JetBrains系列收费都比较贵，虽然有破解版，但我还是提倡使用正版  </p></blockquote></li><li><p><strong>VS For Mac</strong></p><blockquote><p>微软发布的Mac版vs，其实就是Xamarin Studio改了个名，和真正的vs差的太多，但是因为要写c#，而且最新的unity 中只支持vs，所以只能用它。  </p></blockquote></li><li><p><strong>Sublime Text</strong></p><blockquote><p>神级代码编辑软件  </p></blockquote></li><li><p><strong>Navicat Premium</strong></p><blockquote><p>mac上非常优秀的一款数据库管理工具  </p></blockquote></li><li><p><strong>dash</strong></p><blockquote><p>开发者必备API文档聚合,Dash是一个API文档浏览器，以及代码片段管理工具。它就只有这两个功能，但确实是程序员最为关心的特性，可以毫不夸张地说，Dash是它们之中做的最好的一个！非常实用。  </p></blockquote></li></ul><h2 id="效率："><a href="#效率：" class="headerlink" title="效率："></a><strong>效率：</strong></h2><ul><li><p><strong>iWork</strong></p><blockquote><p>Mac自带的办公套件（Pages、Numbers、Keynote）<br>其中个人认为Keynote要优于PowerPoint<br>Pages和Word各有千秋<br>Numbers要差Excel很多  </p></blockquote></li><li><p><strong>OmniGraffle</strong></p><blockquote><p>主要用于绘制 流程图、图表、组织结构图、UI界面设计等等，可以用于设计任何描述图形，简单易用，功能强大，非常的专业和优秀，如果你有任何绘制图表的需求，那么Mac上当首选OmniGraffle。我甚至会觉得它比vision更加好用。  </p></blockquote></li><li><p><strong>XMind</strong></p><blockquote><p>XMind 是一款国产的思维导图制作软件，在国际上也有一定的名气了，简单易用、美观、功能强大,拥有高效的可视化思维模式,具备可扩展、跨平台、稳定性和性能。  </p></blockquote></li><li><p><strong>Axure</strong></p><blockquote><p>Axure RP是一款专业的快速原型设计工具。  </p></blockquote></li><li><p><strong>Bear</strong></p><blockquote><p>在之前我介绍过另一款markdown编辑器（ulysses），而bear是可以代替甚至可以说优于ulysses的一款markdown编辑器。如果有做笔记、写博客的需求，我非常推荐这一款应用。  </p></blockquote></li><li><p>Evernote</p><blockquote><p>印象笔记，你可以使用任何一台设备打开Evernote，在这里捕捉点滴灵感、轻松收集资料、一键演示笔记、高效协作共享，笔记会自动在所有设备上同步。  </p></blockquote></li></ul><h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a><strong>工具：</strong></h2><ul><li><p><strong>Alfred 3</strong></p><blockquote><p>快启工具，可以充当了一切程序的入口，并有高度的可配置性，Mac曾经的第一神器，但随着MacOS的Spotlight功能加强，Alfred已经不那么必要，但习惯使用Alfred后你会很难再离开它。  </p></blockquote></li><li><p><strong>1Password</strong></p><blockquote><p>密码管理工具，MacOS自带的密码管理也十分好用，尤其是在苹果设备上十分便捷，但如果你需要转移到别的系统就需要一款通用型很强的工具，不过我更推荐lastpass。  </p></blockquote></li><li><p><strong>Paste</strong></p><blockquote><p>十分好用的一款剪切板工具  </p></blockquote></li><li><p><strong>BetterTouchTool</strong></p><blockquote><p>如果你使用macbook系列产品，那这款软件会非常有用，MacOS自带的触板及鼠标手势十分有限，而那么大的一块儿触板你怎么忍心荒废，这款应用有极高的自由度让你使用非常多的手势来操控你的mac。  </p></blockquote></li><li><p><strong>Cheatsheet</strong></p><blockquote><p>这款应用你可以长按command，就能查看当前软件的所有快捷键。  </p></blockquote></li><li><p><strong>istat menus</strong></p><blockquote><p>最好的系统状态监控软件  </p></blockquote></li><li><p><strong>ipic</strong></p><blockquote><p>非常好用的图床软件  </p></blockquote></li><li><p><strong>The Unarchiver + Keka</strong></p><blockquote><p>这两款非常好的解压、压缩软件，基本可以完成对任何格式文件的压缩和解压工作  </p></blockquote></li><li><p><strong>CleanMyMac 3</strong></p><blockquote><p>一款使用人数较多的Mac清理工具   </p></blockquote></li><li><p><strong>parallels desktop</strong></p><blockquote><p>Mac上最好用的一款虚拟机软件  </p></blockquote></li><li><p><strong>IINA</strong></p><blockquote><p>Mac上第二好用的视频播放软件，为什么不用第一，因为第一好用的mpv配置非常麻烦，IINA基于mpv，拥有强大的性能和兼容性，可以支持流畅播放几乎所有主流视频格式，并且支持网络播放。  </p></blockquote></li><li><p><strong>Folx</strong></p><blockquote><p>老牌儿下载工具，但是我更推荐迅雷，不过迅雷会和谐很多链接，被和谐的就可以使用Folx来下载  </p></blockquote></li><li><p><strong>ShadowsocksX</strong></p><blockquote><p>科学上网的神器😉  </p></blockquote></li><li><p><strong>Safari</strong></p><blockquote><p>在Mac上safari非常好用，如果要介绍safari可能需要再来一篇文章的篇幅，之后也许我会介绍很多非常好用的safari，让你的safari不亚于firefox和chrome，并且safari除了扩展，自身也有很多非常好用的功能，我们以后再谈  </p></blockquote></li></ul><p>同时MacOS还自带了很多很好用的软件及功能，这就需要自己去研究和发现了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="文章" scheme="http://gyunch.org/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="Mac" scheme="http://gyunch.org/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>区块链</title>
    <link href="http://gyunch.org/2018/01/30/Blockchain/"/>
    <id>http://gyunch.org/2018/01/30/Blockchain/</id>
    <published>2018-01-29T16:00:00.000Z</published>
    <updated>2018-06-04T12:08:20.633Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="什么是区块链"><a href="#什么是区块链" class="headerlink" title="什么是区块链"></a><strong>什么是区块链</strong></h2><blockquote><p>区块链源起比特币，但并不局限在币圈。区块链技术是储存、验证和数据保护等问题的实际解决办法。区块链可被视为分散的、极度安全的数据库。更专业一点来说，区块链是分布式的点对点的基于密码学的共享账本，可以在金融服务、保险、医疗、政府等领域内被广泛应用。  </p></blockquote><ul><li><p>理解区块链，首先需要明确的是，区块链是一套协议和规范，用英文表述就是 Protocol，不是具体的代码或者项目。理解了这套协议，你可以基于不同的语言和技术去实现它，这和我们平时定义了一套 API，然后基于不同的技术实现没有什么分别。</p></li><li><p>从字面上看：区块链是由一个个记录着各种信息的小区块链接起来组成的一个链条，类似于我们将一块块砖头叠起来，而且叠起来后是没办法拆掉的，每个砖头上面还写着各种信息，包括：谁叠的，什么时候叠的，砖头用了什么材质等等，这些信息你也没办法修改。</p></li><li><p>从计算机上看：区块链是一种比较特殊的分布式数据库。分布式数据库就是将数据信息单独放在每台计算机，且存储的信息的一致的，如果有一两台计算机坏掉了，信息也不会丢失，你还可以在其他计算机上查看到。<br>区块链是一种分布式的，所以它是没有中心点的，信息存储在所有加入到区块链网络的节点当中，节点的数据是同步的。节点可以是一台服务器，笔记本电脑，手机等。你要知道的是这些节点的存储的数据都是一模一样。</p></li><li><p>区块链在不同领域的人眼里，可能是不同的东西。角度不同，我们得出的结论也不一样。金融领域的人会认为区块链是个分布式的账本，是一个分布式的去中心化的记账系统。搞安全和密码学的人会说区块链是基于密码学构建的对等网络。而我们程序员了解了区块链技术，会认为这不就是一个保证最终一致性的分布式数据库嘛。</p></li></ul><hr><h2 id="记账系统"><a href="#记账系统" class="headerlink" title="记账系统"></a>记账系统</h2><p>对于普通人来说，记账系统最容易理解，我们从账本说起。比如大家一起做生意，总要有个账本，最初这个账本由账房先生管理。但一个人管，总会出现对账不平衡的情况（比如挪用），于是大家开始轮流管。这种方式也有问题，在某个人保管账本和记账期间，一旦发生了数据丢失或账本损坏的情况，也会搞不清真实原因。最后大家决定用一种新的记账方式，每个人一个自己的账本，任何人改动了自己的账本都要告诉其他所有人，其他人也会在自己的账本记上一笔。只要有人发现新的账目不对，可以拒绝接受。最后以大多数人一致的账目为准。<br>这就是分布式的去中心化的记账系统。但这种做法时间长了还是会有问题，有人天天记，有人偷懒不记，会产生不公平。于是大家决定每天早上掷骰子，根据点数决定谁来记当天的账，其他人核对一下，没问题就复制过来。并且，当天的记账者会获得一点点奖励（这就是挖矿）。</p><hr><h2 id="去中心化的分布式数据库"><a href="#去中心化的分布式数据库" class="headerlink" title="去中心化的分布式数据库"></a>去中心化的分布式数据库</h2><p>把上面的记账系统用软件技术实现了，就是去中心化的分布式数据库。<br>什么是中心化，早期互联网大都采用 CS 架构，一个服务器 N 个客户端，Client 和 Server 之间进行通讯，系统可靠性严重依赖 Server，这叫中性化。<br>随着业务复杂度的增加，服务器端也开始分拆，横向和纵向扩展，读写分离等等，这就是我们常用的分布式架构系统，系统可靠性依赖分布式系统的热备份和容灾恢复能力。这时候服务器虽然分布了，但依然是中性化的。大部分商业公司都采用类似的架构和模式。<br>去中心化是怎么回事呢？就是数据库不属于任何机构和管理员。只要服务器端被某个机构或管理员控制，就存在宕机或数据篡改的风险。区块链和 P2P 的网络通信技术最终实现了去中心化。区块链的作用就是存储信息，可以认为是一个数据库，而任何人都可以通过 P2P 网络架设服务器，接入区块链网络，成为一个节点。这下人人平等了，大家都是 Server，也就没有了 Server，每个节点既是生产者也是消费者。<br>你可以向任何一个节点读写数据，一旦写入就是历史，最后所有的节点都会同步数据，保证「账本」的一致性。<br>区块链是没有管理员的，也不需要人工审核和干涉。那人人都能写数据，数据的可信度怎么保证呢？数据被篡改了咋办？别担心，P2P 网络只是进行信息通讯，保证数据安全的还有共识算法和加密算法。</p><hr><h2 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h2><p>关于共识算法、拜占庭将军问题，大家可以参考这一篇文章，很长，但容易看懂。<br><strong>分布式一致性与共识算法</strong>（<a href="https://draveness.me/consensus）" target="_blank" rel="noopener">https://draveness.me/consensus）</a><br>简单来说，共识算法就是保证少数服从多数，也就是我在记账系统中写过的「最后以大多数人一致的账目为准」。大多数人认可的事情，就是事实。这种规则听起来挺吓人的，比如我们常常在文学作品和历史经验中知道，真理往往掌握在少数人手里。但是在 P2P 的网络里，有无数的节点，要想大部分节点一起作恶，除非这些节点都被某个组织控制了。这种可能性虽然不是没有，但几率非常小。<br>总的来说，共识算法解决的是对某个提案（Proposal）达成一致意见的过程。提案的含义在分布式系统中十分宽泛，包括多个事件发生的顺序、某个键对应的值…等等，可以认为任何需要达成一致的信息都是一个提案。<br>有了共识算法和相关的加密算法，就可以保证数据的安全性和一致性。</p><hr><h2 id="为什么会挖矿？"><a href="#为什么会挖矿？" class="headerlink" title="为什么会挖矿？"></a>为什么会挖矿？</h2><p>谈到比特币，大家耳熟能详的就是挖矿和矿机这种事。那为什么会挖矿呢？挖矿其实是一种激励和竞争机制。<br>在区块链系统中，总有些节点被选中进行数据整理、验证、打包，并把相关的改动广播出去，这个工作还是挺耗资源的，所以会有奖励机制。负责打包的节点会获得系统的奖励，类似积分，对于比特币系统来说，就是奖励比特币。有了奖励，很多节点都希望获得这样的奖励，于是有些区块链系统，比如比特币就会设计出一种竞争机制，让各个节点凭借自己的算力和资源去抢，能抢到这个数据打包的机会，就会获得奖励，也就是比特币。这个竞争的过程就是挖矿。<br>什么是算力呢？就是计算机每秒产生 hash 碰撞的能力。也就是说，手里的矿机每秒能做多少次 hash 碰撞。算力越高，获得的奖励越多。</p><hr><h2 id="区块链的未来"><a href="#区块链的未来" class="headerlink" title="区块链的未来"></a>区块链的未来</h2><p>很多人觉得区块链的唯一应用就是发行虚拟货币，最近国内外市场也是烽烟四起，比如超过百年历史的伊士曼柯达公司宣布推出基于区块链技术的「柯达币」（KodakCoin）和 KodakOne 平台，让全球的摄影师能够更好的控制图片的版权和交易。然后股价就飙升了……<br>了解了区块链的技术特点，我们就知道，区块链的能力远不止虚拟货币领域，未来的 <strong>金融服务、物流、保险、医疗、共享经济、智能合约领域</strong>，应该都会有区块链的身影。<br>繁华落尽，洗尽铅华，所有的技术都将经历时间的洗礼。历经爆发期、衰退期并进入成熟期的技术，才是真正能具备生命力的技术。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="文章" scheme="http://gyunch.org/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="区块链" scheme="http://gyunch.org/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Unity性能优化</title>
    <link href="http://gyunch.org/2017/11/26/UnityPerformance%20Optimization/"/>
    <id>http://gyunch.org/2017/11/26/UnityPerformance Optimization/</id>
    <published>2017-11-25T16:00:00.000Z</published>
    <updated>2018-06-05T08:49:26.756Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><ul><li>性能优化是游戏项目开发过程中一个永恒的话题。玩家和项目的需求在并且会一直增长，同屏人数、游戏特效和场景复杂度永远在向着“榨干”硬件的趋势逼近。所以，无论硬件设备发展到何种程度，无论研发团队有多么丰富的经验积累，性能优化永远是一个非常棘手而又无法绕开的问题。</li><li>对于Unity性能优化，官方有非常好的教程，（参见<a href="https://unity3d.com/cn/learn/tutorials/topics/performance-optimization" target="_blank" rel="noopener">官方教程</a>）。如果英文水平一般，可以参考<a href="http://www.cnblogs.com/alan777/p/6204759.html" target="_blank" rel="noopener">官方教程翻译</a></li><li>同时我们也可以去看看<a href="http://wetest.qq.com/lab/view/108.html?from=content_zhihu" target="_blank" rel="noopener">腾讯是如何做Unity手游性能优化的</a></li><li>这里我说一些自己的经验，以及常用的优化方法</li></ul><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a><strong>工具</strong></h2><ul><li>首先从Unity性能优化工具说起</li><li><strong>Unity Profile</strong><br>Unity中最常用的官方性能分析工具，Unity Profiler能定量地找到C#的GC Alloc问题</li><li><p><strong>XCode Capture GPU frame</strong><br>能高效且定量地定位到GPU中shader的消耗。苹果平台下图形调试最好的选择。</p></li><li><p><strong>TimeProfiler</strong><br>Instruments的TimeProfiler能高效且定量地定位C#脚本的CPU占用，甚至包括部分Unity引擎代码的CPU占用函数消耗，而不必麻烦地添加BeginSample()、EndSample()。</p></li></ul><hr><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h2><ul><li>性能优化主要是围绕CPU、GPU和内存三大方面进行，所以我们可以从这三方面展开。</li></ul><h3 id="CPU优化"><a href="#CPU优化" class="headerlink" title="CPU优化"></a><strong>CPU优化</strong></h3><ol><li>使用对象池优化游戏物体的创建与销毁；</li><li>使用对象池时，应当可以支持把物体移除屏幕，连续使用的物体可以只是移出屏幕，只有长时间不使用的物体才隐藏；</li><li>减少对粒子系统Play()的调用；</li><li>避免实例化对象时造成cpu峰值。比如某一个特定时间，集中创建很多对象，这里可以使用协程做一些间隔；</li><li>尽量删除脚本中为空或不需要的方法；</li><li>同一脚本中频繁使用的变量建议声明其为全局变量，脚本之间频繁调用的变量或方法建议声明为全局静态变量或方法；</li><li>不要去频繁获取组件，将其声明为全局变量；</li><li>处理Rigidbody时，使用FixedUpdate，设置Fixed timestep，减少物理计算次数；</li><li>如果可以，尽量不用MeshCollider，如果不能避免的话，尽量用减少Mesh的面片数，或用较少面片的代理体来代替；</li><li>减少GetComponent()的使用频率，GetComponent()会有一定的GC产生，有少量的CPU消耗；</li><li>使用内建数组如使用Vector3.zero而不是new Vector(0,0,0);</li></ol><h3 id="GPU优化"><a href="#GPU优化" class="headerlink" title="GPU优化"></a><strong>GPU优化</strong></h3><ol><li>保持材质的数目尽可能少；</li><li>Mesh合并，可以在3dMax或其他建模软件上进行操作，也可在Unity中进行操作；</li><li>使用“全局光照+光照探头”代替实时局部光照；</li><li>避免使用实时阴影，如果必须使用实时阴影，可以在 Quality 质量设置中选择合适的阴影质量，在画面效果和渲染效率之间找到平衡点；</li><li>LOD层级细节，根据距离的远近使用不同模型级别，这样就可以减少模型上面的顶点和面片数量从而提高性能；</li><li>使用纹理图集（一张大贴图里包含了很多子贴图）来代替一系列单独的小贴图；</li><li>使用遮挡剔除（Occlusion Culling）当场景中有大量模型需要渲染时，应用遮挡剔除可实现减少DrawCall提升性能的效果；</li><li>Lightmapping光照贴图技术，首先将需要进行光照贴图的游戏物体设置为Lightmap Static，其次将用于光照贴图的所有光源设置为Baked模式，最后进行烘焙；</li><li>静态物体尽量将法线渲染到贴图。</li><li>使用静态批处理，静态批处理允许游戏引擎尽可能多的去降低绘制任意大小的物体所产生的DrawCall</li></ol><h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a><strong>内存优化</strong></h3><ol><li>使用压缩纹理</li><li>及时释放资源</li><li>减少使用的库</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="优化" scheme="http://gyunch.org/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>GameFramework</title>
    <link href="http://gyunch.org/2017/10/09/Game%20Framework%20/"/>
    <id>http://gyunch.org/2017/10/09/Game Framework /</id>
    <published>2017-10-08T16:00:00.000Z</published>
    <updated>2018-06-06T14:09:47.339Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><p><code>持续更新</code></p><ul><li><a href="https://github.com/EllanJiang/GameFramework" target="_blank" rel="noopener">GameFramework</a> 是一个基于 Unity 5.3+ 引擎的游戏框架，主要对游戏开发过程中常用模块进行了封装，很大程度地规范开发过程、加快开发速度并保证产品质量。<br>QQ群：216332935</li></ul><hr><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frutoeyt51j30te0dtt98.jpg" alt=" "></p><ul><li>在最新的 Game Framework 版本中，包含以下 17 个内置模块</li></ul><ol><li><strong>数据结点 (Data Node)</strong> – 将任意类型的数据以树状结构的形式进行保存，用于管理游戏运行时的各种数据。</li><li><strong>数据表 (Data Table)</strong> – 可以将游戏数据以表格（如 Microsoft Excel）的形式进行配置后，使用此模块使用这些数据表。数据表的格式是可以自定义的。</li><li><strong>调试器 (Debugger)</strong> – 当游戏在 Unity 编辑器中运行或者以 Development 方式发布运行时，将出现调试器窗口，便于查看运行时日志、调试信息等。用户还可以方便地将自己的功能注册到调试器窗口上并使用。</li><li><strong>下载 (Download)</strong> – 提供下载文件的功能，支持断点续传，并可指定允许几个下载器进行同时下载。更新资源时会主动调用此模块。</li><li><strong>实体 (Entity)</strong> – 将游戏场景中，动态创建的一切物体定义为实体。此模块提供管理实体和实体组的功能，如显示隐藏实体、挂接实体（如挂接武器、坐骑，或者抓起另一个实体）等。实体使用结束后可以不立刻销毁，从而等待下一次重新使用。</li><li><strong>事件 (Event)</strong> – 游戏逻辑监听、抛出事件的机制。Game Framework 中的很多模块在完成操作后都会抛出内置事件，监听这些事件将大大解除游戏逻辑之间的耦合。用户也可以定义自己的游戏逻辑事件。</li><li><strong>有限状态机 (FSM)</strong> – 提供创建、使用和销毁有限状态机的功能，一些适用于有限状态机机制的游戏逻辑，使用此模块将是一个不错的选择。</li><li><strong>本地化 (Localization)</strong> – 提供本地化功能，也就是我们平时所说的多语言。Game Framework 在本地化方面，不但支持文本的本地化，还支持任意资源的本地化，比如游戏中释放烟花特效也可以做出几个多国语言的版本，使得中文版里是“新年好”字样的特效，而英文版里是“Happy New Year”字样的特效。</li><li><strong>网络 (Network)</strong> – 提供使用 Socket 长连接的功能，当前支持 TCP 协议，同时兼容 IPv4 和 IPv6 两个版本。用户可以同时建立多个连接与多个服务器同时进行通信，比如除了连接常规的游戏服务器，还可以连接语音聊天服务器。如果想接入 ProtoBuf 之类的协议库，只要派生自 Packet 类并实现自己的消息包类即可使用。</li><li><strong>对象池 (Object Pool)</strong> – 提供对象缓存池的功能，避免频繁地创建和销毁各种游戏对象，提高游戏性能。除了 Game Framework 自身使用了对象池，用户还可以很方便地创建和管理自己的对象池。</li><li><strong>流程 (Procedure)</strong> – 是贯穿游戏运行时整个生命周期的有限状态机。通过流程，将不同的游戏状态进行解耦将是一个非常好的习惯。对于网络游戏，你可能需要如检查资源流程、更新资源流程、检查服务器列表流程、选择服务器流程、登录服务器流程、创建角色流程等流程，而对于单机游戏，你可能需要在游戏选择菜单流程和游戏实际玩法流程之间做切换。如果想增加流程，只要派生自 ProcedureBase 类并实现自己的流程类即可使用。</li><li><strong>资源 (Resource)</strong> – 为了保证玩家的体验，我们不推荐再使用同步的方式加载资源，由于 Game Framework 自身使用了一套完整的异步加载资源体系，因此只提供了异步加载资源的接口。不论简单的数据表、本地化字典，还是复杂的实体、场景、界面，我们都将使用异步加载。同时，Game Framework 提供了默认的内存管理策略（当然，你也可以定义自己的内存管理策略）。多数情况下，在使用 GameObject 的过程中，你甚至可以不需要自行进行 Instantiate 或者是 Destroy 操作。</li><li><strong>场景 (Scene)</strong> – 提供场景管理的功能，可以同时加载多个场景，也可以随时卸载任何一个场景，从而很容易地实现场景的分部加载。</li><li><strong>配置 (Setting)</strong> – 以键值对的形式存储玩家数据，对 UnityEngine.PlayerPrefs 进行封装。</li><li><strong>声音 (Sound)</strong> – 提供管理声音和声音组的功能，用户可以自定义一个声音的音量、是2D声音还是3D声音，甚至是直接绑定到某个实体上跟随实体移动。</li><li><strong>界面 (UI)</strong> – 提供管理界面和界面组的功能，如显示隐藏界面、激活界面、改变界面层级等。不论是 Unity 内置的 uGUI 还是其它类型的 UI 插件（如 NGUI），只要派生自 UIFormLogic 类并实现自己的界面类即可使用。界面使用结束后可以不立刻销毁，从而等待下一次重新使用。</li><li><strong>Web 请求 (Web Request)</strong> – 提供使用短连接的功能，可以用 Get 或者 Post 方法向服务器发送请求并获取响应数据，可指定允许几个 Web 请求器进行同时请求。</li></ol><hr><h2 id="GameFrameworkEntry（框架入口）"><a href="#GameFrameworkEntry（框架入口）" class="headerlink" title="GameFrameworkEntry（框架入口）"></a><strong>GameFrameworkEntry（框架入口）</strong></h2><p>GameFrameworkEntry使用链表来维护所有的GameFrameworkModule（框架模块），并提供对GameFrameworkModule的各种相关操作以及框架版本号信息</p><ol><li>只有在获取模块时，对应模块不存在才会创建模块</li><li>创建模块时，根据模块优先级决定新模块在链表中的位置</li><li>轮询模块时，根据优先级决定轮询顺序（即正向遍历链表调用OnUpdate）（<strong>在**</strong>UGF<strong><strong>中，由</strong></strong>BaseComponent<strong>**来调用轮询方法</strong>）</li><li><strong>所有的**</strong>Manager<strong><strong>类都需要继承</strong></strong>GameFrameworkModule**，并实现对应的IManager接口</li></ol><hr><h2 id="GameEntry（游戏入口）"><a href="#GameEntry（游戏入口）" class="headerlink" title="GameEntry（游戏入口）"></a><strong>GameEntry（游戏入口）</strong></h2><p>示例程序Start Force里<strong>包含两个**</strong>GameEntry**，一个是UGF的，一个是Start Force的。Start Force在场景GameFramework中有一个Game Framework物体，上面挂载了Start Force的GameEntry脚本作为游戏入口</p><ol><li>UGF的GameEntry使用链表来维护所有的GameFrameworkComponent（框架组件），并提供各种相关操作。</li><li>所有GameFrameworkComponent在Awake中调用UGF的GameEntry的RegisterComponent(GameFrameworkComponen)，将自身添加到UGF的GameEntry中的链表里</li><li>Start Force的GameEntry脚本持有所有GameFrameworkComponent的引用，被分成了3个部分，分别负责调用Start方法，初始化内置GameFrameworkComponent，初始化自定义GameFrameworkComponent</li><li>GameFramework物体下有预制体Builtin（由UGF框架提供，原名GameFramework），该预制体下的所有子物体分别挂载了所有的内置GameFrameworkComponent。<strong>所有内置**</strong>GameFrameworkComponent<strong><strong>都持有一个对应</strong></strong>IManager<strong><strong>接口的引用（可以视作</strong></strong>GF<strong><strong>的</strong></strong>Manager<strong><strong>在</strong></strong>UGF<strong>**中的代理或实现）</strong>，在初始化时通过GameFrameworkEntry来获取实例</li><li><strong>自定义的**</strong>GameFrameworkComponent**需要另外创建一个空物体作为GameFramework的子物体，然后将自定义组件各自挂载到空物体下，作为其子物体</li></ol><hr><h2 id="FSM（有限状态机）与Procedure（流程）"><a href="#FSM（有限状态机）与Procedure（流程）" class="headerlink" title="FSM（有限状态机）与Procedure（流程）"></a><strong>FSM（有限状态机）与Procedure（流程）</strong></h2><p>流程是贯穿游戏运行时整个生命周期的有限状态机。框架用流程来处理所有的事情，不同的流程负责不同的工作，流程的切换是用有限状态机来实现的</p><ol><li>FSM模块主要由状态，状态机，状态机管理器三部分组成</li><li>状态FsmState<t>维护一个事件码与事件处理方法的字典，并提供各种对应操作</t></li><li>状态机Fsm继承FsmBase并实现IFsm<t>接口，维护该状态机的所有状态与状态机数据，并提供各种对应操作</t></li><li>状态机管理器FsmManager维护所有状态机，并提供各种对应操作</li><li>Procedure模块主要由流程基类和流程管理器两部分组成</li><li>流程基类ProcedureBase继承自FsmState<iproceduremanager>，可以理解为一种特殊的状态</iproceduremanager></li><li>流程管理器ProcedureManager持有FsmManager与自身的Fsm的引用，并提供对流程的相关操作</li><li><strong>在**</strong>UGF<strong><strong>中的</strong></strong>ProcedureComponent<strong>**，主要负责读取创建好的流程类</strong>，然后调用ProcedureManager来创建并开始状态机</li></ol><hr><h2 id="Event（事件）"><a href="#Event（事件）" class="headerlink" title="Event（事件）"></a><strong>Event（事件）</strong></h2><p>Event是游戏逻辑监听、抛出事件的机制。</p><ol><li>Event模块由事件参数，事件池，事件管理器三部分组成</li><li>事件参数基类BaseEventArgs继承GameFrameworkEventArgs（还有另一种事件参数类也继承GameFrameworkEventArgs，<strong>那种事件不受**</strong>Event<strong>**模块管理</strong>）</li><li>事件池EventPool<t>主要维护事件结点（Event）（Event是对BaseEventArgs的封装）的队列（该队列处理线程安全的事件抛出）与一个事件码与事件处理方法的字典，并提供各种对应操作</t></li><li>事件管理器EventManager是对EventPool<t>里各种操作的代理</t></li></ol><hr><h2 id="任务（Task）"><a href="#任务（Task）" class="headerlink" title="任务（Task）"></a><strong>任务（Task）</strong></h2><p>Task功能主要负责管理Web请求、资源的下载或加载的任务的执行</p><ol><li>Task功能主要由任务，任务代理，任务池三部分组成</li><li>任务（ITask）存储了任务执行需要的数据</li><li>任务代理（ITaskAgent<t>）是对ITask的代理类，提供对任务的各种对应操作</t></li><li>任务池TaskPool<t>负责维护三种容器（可用任务代理，工作中任务代理，等待任务），并提供各种对应操作</t></li></ol><hr><h2 id="DataNode（数据结点）"><a href="#DataNode（数据结点）" class="headerlink" title="DataNode（数据结点）"></a><strong>DataNode（数据结点）</strong></h2><p>DataNode将任意类型的数据以树状结构的形式进行保存，用于管理游戏运行时的各种数据<br>数据结点的使用非常灵活，有以下三种使用方式：<br>使用数据结点组件，直接通过绝对路径获取或设置数据；<br>使用数据结点组件，通过参照某个数据结点和相对路径获取或设置数据；<br>使用数据结点组件获取数据结点后，通过数据结点的接口进行更多操作。</p><ol><li>DataNode模块由数据结点和数据结点管理器两部分组成</li><li>数据结点（DataNode）存储数据以及父结点、子结点的相关信息</li><li>数据结点管理器（DataNodeManager）管理根结点，并提供数据结点的相关操作</li></ol><hr><h2 id="ObjectPool（对象池）"><a href="#ObjectPool（对象池）" class="headerlink" title="ObjectPool（对象池）"></a><strong>ObjectPool（对象池）</strong></h2><p>ObjectPool提供对象缓存池的功能，避免频繁地创建和销毁各种游戏对象，提高游戏性能。</p><ol><li>ObjectPool模块主要由对象基类，内部对象，对象池，对象池管理器三部分组成</li><li>对象基类（ObjectBase）是所有需要由ObjectPool模块管理的对象的父类</li><li>内部对象（Object<t>）存储ObjectBase相关数据，并提供获取与回收的方法</t></li><li>对象池（ObjectPool<t>）使用链表维护池子里的所有Object<t>，并提供各种相关操作</t></t></li><li>对象池管理器（ObjectPoolManager）使用字典维护所有ObjectPool<t>，并提供各种相关操作</t></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="框架" scheme="http://gyunch.org/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>LuaFramework</title>
    <link href="http://gyunch.org/2017/09/13/LuaFramework/"/>
    <id>http://gyunch.org/2017/09/13/LuaFramework/</id>
    <published>2017-09-12T16:00:00.000Z</published>
    <updated>2018-06-06T14:05:45.268Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><p><code>持续更新</code></p><blockquote><p><strong>LuaFramework是基于UGUI+tolua的简单游戏框架</strong><br>tolua作者:<a href="https://github.com/topameng" target="_blank" rel="noopener">蒙哥</a>，LuaFramework作者:<a href="https://github.com/jarjin/LuaFramework_UGUI" target="_blank" rel="noopener">骏擎</a><br>想了解更多tolua及luaframework相关，可以关注博客<a href="http://doc.ulua.org/default.asp" target="_blank" rel="noopener">uLua/cstolua</a><br>tolua技术群:286510803  , tolua技术讨论群:434341400(已满) 543826216<br>此文更新于 2018/5/1 ，这里讲的部分方法是所对应的最新版本 </p></blockquote><hr><h2 id="LuaFramework热更新流程"><a href="#LuaFramework热更新流程" class="headerlink" title="LuaFramework热更新流程"></a><strong>LuaFramework热更新流程</strong></h2><ol><li>Main脚本调用启动函数Startup；</li><li>游戏管理器GameManager生成；</li><li>GameManager调用CheckExtractResource函数，检查“数据目录”是否存在；</li><li>若“数据目录”不存在，说明是初次运行游戏，将“游戏包资源目录”的内容解压缩到“数据目录”；</li><li>若“数据目录”存在，检查是否需要从服务器下载资源，GameManager调用OnUpdateResource函数下载“网络资源地址”上的files.txt，然后与“数据目录”中文件的md5码做对比，更新有变化的文件；</li><li>更新完成后，GameManager调用OnResourceInited函数，启动Lua状态机，游戏开始。</li></ol><ul><li>调试：在Main.lua加入调试语句，在LuaManager的StartMain访问热更新增的Lua脚本，生成新打包的Prefab</li></ul><blockquote><p>AppConst类的UpdateMode设为true，则从指定服务器下载资源，否则从本地“数据目录”获取。LuaBundleMode设为true，则从AssetBundle解压Lua脚本，否则直接读取项目脚本。<br>可以打开AssetsLuaFrameworkEditorCustomSettings.cs看到所有可以供lua调用的类  </p></blockquote><hr><h2 id="添加新的Lua脚本到AssetBundle包"><a href="#添加新的Lua脚本到AssetBundle包" class="headerlink" title="添加新的Lua脚本到AssetBundle包"></a><strong>添加新的Lua脚本到AssetBundle包</strong></h2><ul><li>将Lua脚本存放到 Assets/LuaFramework/Lua 目录,因为，当按下LuaFramework-Build XXX Resources的时候，框架会自动将Assets/LuaFramework/Lua下的所有内容打成AssetBundle包，放在StreamingAssets下，可以发现，StreamingAssets文件夹下会有个Lua文件夹，里面放的就是Assets/LuaFramework/Lua在打包之后的结果</li><li>主要注意以下几点</li></ul><blockquote><p>1：打开StreamingAssets/Lua，会发现，这个文件夹下大致分为两部分，3rd文件夹，和一堆资源包<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frmk17od2vj30d00y2ad5.jpg" alt=" "><br>其中，资源包的命名特点是对应路径信息的，例如lua_3rd_cjson和lua_3rd_cjson.unity3d这一组资源包,他对应着的是LuaFramework/Lua/3rd/cjson里面的Lua文件，这组资源包就是这个文件夹下的lua文件打包出来的结果。  </p></blockquote><blockquote><p>2：StreamingAssets/Lua文件夹下，除了资源包外，还有一个3rd文件夹，可以打开Assets/LuaFramework/Lua/3rd 目录，然后打开其中一个，例如cjson的文件夹，可以发现，这文件夹里除了一些lua文件，还有一些txt配置文件或说明文件，所以，这个StreamingAssets/Lua/3rd文件夹下，放的就是这些lua文件外的文件资源  </p></blockquote><blockquote><p>3：综上所述，如果我们要打包一个自定义的Lua文件（不是框架提供的Main.lua文件）的话，那么我们完全可以先在Assets/LuaFramework/Lua这个文件夹下，自定义一个专门存放我们编写的Lua文件的文件夹，当打包出来后，会发现，StreamingAssets/Lua下会有一个自定义的文件夹名.unity3d的一组资源包。  </p></blockquote><blockquote><p>4：更改Lua入口，不用框架提供给我们的Main.lua这个文件：找到LuaManger这个类，然后找到StartMain()这个方法，<img src="https://ws1.sinaimg.cn/large/006tNc79gy1frmk80irnuj30qy08sac7.jpg" alt=" "><br>只需要把lua.DoFile里面的参数修改为你自定义的lua文件名，然后LuaFunction main=lua.GetFunction(“Main”)这一行的括号内的参数，修改为作为入口且存在于你自定义的lua文件中的lua方法即可。<br>不管是不是自己定义lua入口文件，最好都放在Assets/LuaFramework/Lua下，不要再另外加文件夹，因为放在Assets/LuaFramework/Lua路径下的所有lua文件都会直接一同打包在lua.unity3d资源包中，而程序设置好就是去这个包里读取lua的入口文件，除非你会改动lua入口文件的读取路径。  </p></blockquote><blockquote><p>5：可以读取多个lua文件:<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frmkcdrsdaj30o607q40m.jpg" alt=" ">  </p></blockquote><hr><h2 id="创建新的AssetBundle包"><a href="#创建新的AssetBundle包" class="headerlink" title="创建新的AssetBundle包"></a><strong>创建新的AssetBundle包</strong></h2><ul><li>LuaFramework/Build XXX Resources 的功能全都写在了Assets/LuaFramework/Editor/Packager.cs，这个类中，以及跟随打包生成的 StreamingAssets/files 这个MD5校验码文件是如何生成，也是写在这个Packager.cs 文件中，所以，如果想打包一些此框架没提供的平台资源，可以到这个Packager 模仿增加对应的打包方法 </li></ul><blockquote><p>打包函数的主体代码是 Packager.cs 中的 BuildAssetResource ， HandleExampleBundle ， AddBuildMap ， HandleLuaBundle ， HandleLuaFile 这五个方法  </p><ul><li>BuildAssetResource进行资源文件夹刷新，并且根据AppConst类里静态布尔属性设置情况的不同，分别调用HandleExampleBundle ， HandleLuaBundle ， HandleLuaFile 函数</li><li>HandleExampleBundle 作用是告诉使用者如何打包美术素材，框架格式是什么，如果有打包的美术资源，可以根据这个格式自定义一个方法，来进行打包，AddBuildMap 方法里第一个参数：打包出来的资源名字，这个名字是用 AppConst.ExtName （值为 unity3D ）作为后缀名。第二个参数：要打包的资源原本的格式， *.XXX 代表所有这种格式的资源。第三个参数：次框架是对指定路径的文件夹进行整体打包操作的，所以，第三个参数是你要打包的资源位于项目哪个文件夹中</li><li>所以综上所述，如果你要打包美术资源，先在项目中创建一个专门存放你自己的美术资源的文件夹，然后在 Packager.cs 中新建一个函数，里面的代码复制HandleExampleBundle，然后修改 AddBuildMap 参数，在完成上述步骤后，因为你的项目打包出来之前会删掉框架提供的示例场景，所以要把 AppConst 中的 ExampleMode 设置为 false ，最后在 Packager.cs 加入如图else代码，调用你的自定义打包函数<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frmla5dcpcj317q0tcnbc.jpg" alt=" "></li></ul></blockquote><ul><li>HandleLuaBundle ， HandleLuaFile 这两个函数是告诉用户如何将 Lua 文件打包成 AssetBundle 的，通常状况下不建议修改，因为功能已经很齐全了，当然，如果你想将这种功能实现应用到如 Xlua 中，可以去查看这两个函数是如何写的。</li></ul><p>热更新主要由三部分组成：</p><ol><li>C# 与 Lua 的互相调用机制</li><li>Lua 文件的打包</li><li>网络传输，校验<br>XLua ， ToLua ， ULua… 只是提供了 C# 与 Lua 的互相调用机制，并没有提供其余两者的功能实现，所以如果自己想开发个基于如 Xlua 这样的热更新框架，可以参照这个基于 ToLua 的框架</li></ol><hr><h2 id="使用框架对下载的资源进行加载"><a href="#使用框架对下载的资源进行加载" class="headerlink" title="使用框架对下载的资源进行加载"></a><strong>使用框架对下载的资源进行加载</strong></h2><ul><li>在此之前，你要明白为何这个框架可以让lua脚本访问到C#的类</li><li><p>当你按下Lua/Clear wrap Files 时，会有弹出框，按下确定框架就会自动生成一堆Wrap结尾的文件，这个自动生成的文件所对应的就是一个叫 AppConst 的类，而这个框架就是让 Lua 通过访问这些自动生成的 wrap 的类来达到访问 C#类的目的<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frmlk5eb8pj30ck0wy0xj.jpg" alt=" "> </p></li><li><p>接下来就是资源的加载与生成：</p></li></ul><blockquote><p>在ResourceManager类中，框架提供了三个重载LoadPrefab方法<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frmlp40rguj312s0ae44d.jpg" alt=" "><br>其参数分别是：  </p><ol><li>要加载的AssetBundle包的名字</li><li>需要加载此包中哪些美术素材</li><li>回调方法（这个方法的参数列表有一个UnityEngine.Object[]类型的变量的，这个数组变量存的就是你所加载的美术资源）</li></ol></blockquote><blockquote><p>Lua中调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Main()</span><br><span class="line">print(&quot;logic start&quot;)</span><br><span class="line">LuaHelper = LuaFramework.LuaHelper</span><br><span class="line">resMgr = LuaHelper.GetResManager</span><br><span class="line">resMgr: LoadPrefab(&quot;myprefabs.unity3d&quot;, &#123;&quot;Sphere&quot;, &quot;Cube&quot;&#125;, LoadAssetBundle)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function LoadAssetBundle(go)</span><br><span class="line">for i = 0, go.Length - 1, 1 do</span><br><span class="line">UnityEngine.GameObject.Instantiate(go[i])</span><br><span class="line">--go是userdata类型，遍历的时候必须用Length去取得长度</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Lua" scheme="http://gyunch.org/categories/Lua/"/>
    
    
      <category term="框架" scheme="http://gyunch.org/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>A*算法</title>
    <link href="http://gyunch.org/2017/07/17/Astar/"/>
    <id>http://gyunch.org/2017/07/17/Astar/</id>
    <published>2017-07-16T16:00:00.000Z</published>
    <updated>2018-06-06T08:23:51.062Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="A-算法概述"><a href="#A-算法概述" class="headerlink" title="A*算法概述"></a><strong>A*算法概述</strong></h2><ul><li>该算法综合了 Best-First Search 和 Dijkstra 算法的优点：在进行启发式搜索提高算法效率的同时，可以保证找到一条最优路径。</li><li>与贪婪算法不同，贪婪算法适合动态规划，寻找局部最优解，不保证最优解。A*是静态网格中求解最短路最有效的方法。也是耗时的算法，不宜寻路频繁的场合。一般来说适合需求精确的场合。</li><li>比如在魔兽争霸中，使用鼠标点击地图上的一个位置，人物会根据最短路径到达你指定的地点，途中会自动避开障碍物</li></ul><hr><h2 id="A-算法详解"><a href="#A-算法详解" class="headerlink" title="A*算法详解"></a><strong>A*算法详解</strong></h2><h3 id="搜索区域"><a href="#搜索区域" class="headerlink" title="搜索区域"></a><strong>搜索区域</strong></h3><ul><li>假设，如下图，要从A点移动到B点，但是这两点之间被一堵墙隔开。<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fs1e09vw07j30a2074weg.jpg" alt=" "><br>我们把要搜寻的区域划分成了正方形的格子，这是寻路的第一步，简化搜索区域。这个特殊的方法把我们的搜索区域简化为了二维数组。数组的每一项代表一个格子，它的状态就是可走和不可走。通过计算出从A到B需要走过哪些方格，就找到了路径。一旦路径找到了，人物便从一个方格的中心移动到另一个方格的中心，直至到达目的地。<br>方格的中心点我们称为节点。当然，我们有可能把搜索区域划为任意多边形而不必须是正方形，而节点可以放在多变形的中心，也可以放在多边形的边上。</li></ul><h3 id="开始搜索"><a href="#开始搜索" class="headerlink" title="开始搜索"></a><strong>开始搜索</strong></h3><ul><li>当我们把搜寻区域简化为一组可以量化的节点后，下一步便是查找最短路径。我们从起点开始，检查其相邻的方格，然后向四周扩展，直至找到目标为止。</li></ul><p>我们需要经过这几个步骤：</p><ol><li>从起点A开始，并将其加入到一个由方格组成的open list(开放列表)中。现在open list里只有一项，就是起点A，后面会逐渐加入更多的项。Open list里的格子路径可能会是沿途经过的，也有可能不经过。基本上open list是一个待检查的方格列表。</li><li>查看与起点A相邻的方格(忽略其中非法地形占领的方格)，把其中可走的或可到达的方格也加入到open list中。把起点A设置为这些方格的父节点。当我们在追踪路径时，这些父节点的内容是很重要的。</li><li>把A从open list中移除，加入到close list(封闭列表)中，close list中的每个方格都是现在不需要再关注的。</li></ol><p>如下图，绿色的方格为起点，它的外框是亮蓝色，表示该方格被加入到了close list。与它相邻的黑色方格是需要被检查的，他们的外框是亮绿色。每个黑方格都有一个灰色的指针指向他们的父节点，这里是起点A。<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fs1gd7qgtij3047046q2s.jpg" alt=" "></p><p>之后，我们就需要从open list中选择一个与起点A相邻的方格。</p><h3 id="路径选择"><a href="#路径选择" class="headerlink" title="路径选择"></a><strong>路径选择</strong></h3><ul><li>计算出组成路径方格的关键是这个等式：F = G + H<br>其中，</li><li>G = 从起点A移动到指定方格的移动代价，沿着到达该方格而生成的路径。</li><li><p>H = 从指定的方格移动到终点B的估算成本。这个通常被称为试探法，因为这仅是猜测。直到找到了路径我们才会知道真正的距离，因为途中有各种各样的障碍。<br>最终路径产生的方式就是反复遍历open list，选择F值最小的方格。</p></li><li><p><strong>G值</strong></p><blockquote><p>如上所述，G是从起点Ａ移动到指定方格的移动代价。在本例中，横向和纵向的移动代价为10，对角线的移动代价为14。（之所以使用这些数据，是因为对角移动距离是2的平方根，或者是近似的1.414倍的横向或纵向移动代价。使用10和14就是为了简单起见。）<br>我们是沿着到达指定方格的路径来计算G值，那么计算出该方格G值的方法就是找出其父亲的G值，然后按父亲是直线方向还是斜线方向加上10或14。  </p></blockquote></li><li><strong>H值</strong><blockquote><p>有很多方法可以估算H值。这里我们使用Manhattan方法，计算从当前方格横向或纵向移动到达目标所经过的方格数，忽略对角移动，然后把总数乘以10。之所以叫做Manhattan方法，是因为这很像统计从一个地点到另一个地点所穿过的街区数，而你不能斜向穿过街区。重要的是，计算H是，要忽略路径中的障碍物。这是对剩余距离的估算值，而不是实际值，因此才称为试探法。  </p></blockquote></li></ul><p>把G和H相加便得到F。我们第一步的结果如下图所示。每个方格都标上了F，G，H的值，就像起点右边的方格那样，左上角是F，左下角是G，右下角是H。<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fs1gq9cik5j30a2073q30.jpg" alt=" "><br>G = 10。是因为水平方向从起点到这个位置只有一个方格的距离。与起点直接相邻的上方，下方，左方的方格的G值都是10，对角线的方格G值都是14。</p><p>H值通过估算起点到终点(红色方格)的Manhattan距离得到，仅作横向和纵向移动，并忽略沿途墙壁。使用这种方式，起点右边的方格到终点有3个方格的距离，因此H = 30。这个方格上方的方格到终点有4个方格的距离(注意只计算横向和纵向距离)，因此H = 40。对于其他的方格，你可以用同样的方法知道H值是如何得来的。</p><p>每个方格的F值，就是把H与G相加</p><h3 id="继续搜索"><a href="#继续搜索" class="headerlink" title="继续搜索"></a><strong>继续搜索</strong></h3><ul><li>我们接着之上的步骤继续搜索，在上边搜索中，我们已经把把A从open list中移除，加入到close list(封闭列表)中，接下来我们从open list选择F值最小的节点然后继续如下操作</li></ul><ol start="4"><li>将其从open list里取出，放到close list中。</li><li>检查所有与其相邻的方格，忽略其中在close list中或是不可走的地形，如果方格不在open lsit中，则把它们加入到open list中，并把当前选定的方格作为新加入的方格的父节点。</li><li><p>如果某个相邻的方格已经在open list中，检查如果用新的路径（就是经过 C 的路径）到达它的话，G 值是否会更低一些，如果新的 G 值更低，那就把它的父方格改为目前选中的方格 C，然后重新计算它的 F 值和 G 值（H 值不需要重新计算，因为对于每个方块，H 值是不变的）。如果新的 G 值比较高，就说明经过 C 在到达 D 不是最优解，这时我们什么也不做。<br>这里可能需要解释一下：<br>首先参考下图<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fs1hc389fyj309x074jrg.jpg" alt=" "></p><blockquote><p>在我们最初的9个方格中，还有8个在open list中，起点被放入了close list中。在这些方格中，起点右边的格子(C)的F值40最小，因此我们选择这个方格作为下一个要处理的方格。它的外框用蓝线打亮。<br>首先，我们把它从open list移到close list中。然后我们检查与它相邻的方格。它右边是墙壁，我们忽略。它左边的方格是起点，在close list中，我们也忽略。其他4个相邻的方格均在open list中，我们需要使用G值来判定经由这个方格到达那里的路径是否更好。先看方格D。它现在的G值为14。如果我们经由当前方格到达那里，G值将会为20(其中10为到达当前方格的G值，此外还要加上从当前方格纵向移动到上面方格的G值10)。显然20比14大，因此这不是最优的路径。看图就会明白。直接从起点沿对角线移动到那个方格比先横向移动再纵向移动要好。<br>当把4个已经在open list中的相邻方格都检查后，没有发现经由当前方格的更好路径，因此我们不做任何改变。现在我们已经检查了当前方格的所有相邻的方格，并也对他们作了处理，是时候选择下一个待处理的方格了。  </p></blockquote></li><li><p>再次遍历我们的open list，现在它只有7个方格了，我们需要选择F值最小的那个。这次有两个方格的F值都54，从速度上考虑，选择最后加入open list的方格更快。这导致了在寻路过程中，当靠近目标时，优先使用新找到的方格的偏好。<br>我们选择D方格<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fs1i2bqjrrj309x07274e.jpg" alt=" "></p></li></ol><ul><li><p>接下来我们再次检查相邻的方格，右边是墙，忽略。上边和左上都是close list，也忽略。而右下，也就是墙的下边，因为如果不穿越墙角的话，你不能直接从当前方格移动到那个方格，所以也忽略。<br>这样还剩下三个方格，当前方格下面的两个方格还没有加入open list，所以把它们加入，同时把当前方格设为它们的父方格，并计算 F,H,G 值，而当前方格左边的方格，我们检查经由当前方格到达那里是否具有更小的G值。没有，所以不做任何处理。D被加入到关闭列表中，我们准备从open list中选择下一个待处理的方格。</p></li><li><p>依此循环，如果有方格重新计算后 G 值更小的，需要改变 G 值，且改变父节点。当发现open list中出现红色方块也就是终点的时候，结束循环。<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fs1irbdy72j30b808jaag.jpg" alt=" "><br>上图可以观察到，在起点下面两格的方格的父亲已经与前面不同了。之前它的G值是28并且指向它右上方的方格。现在它的G值为20，并且指向它正上方的方格。这在寻路过程中的某处发生，使用新路径时G值经过检查并且变得更低，因此父节点被重新设置，G和F值被重新计算。在这个例子中，这些改变并没有什么影响，但在其他一些场合中，这种改变会导致结果的很大变化。</p></li></ul><ol start="8"><li>最后就是如何确定实际路径。从终点开始，按着箭头向父节点移动，这样就被带回到了起点，这也就是你的路径。如下图所示。从起点A移动到终点B就是简单从路径上的一个方格的中心移动到另一个方格的中心，直至目标。<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fs1iuzzhdpj30bf08k0t5.jpg" alt=" "></li></ol><hr><h2 id="A-算法实例"><a href="#A-算法实例" class="headerlink" title="A*算法实例"></a><strong>A*算法实例</strong></h2><ul><li>上面我解释了整个A<em>算法的流程，这里我通过一个简单的例子，演示一下A</em>算法的使用</li></ul><blockquote><p>Point.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class Point &#123;</span><br><span class="line"></span><br><span class="line">public Point Parent &#123;</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public float F &#123;</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public float G &#123;</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public float H &#123;</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int X &#123;</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">&#125;</span><br><span class="line">public int Y &#123;</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*//表示是否是障碍物*</span><br><span class="line">public bool isWall &#123;</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Point (int x, int y, Point parent = null)&#123;</span><br><span class="line">this.X = x;</span><br><span class="line">this.Y = y;</span><br><span class="line">this.Parent = parent;</span><br><span class="line">isWall = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void UpdateParent(Point parent, float g)&#123;</span><br><span class="line">this.Parent = parent;</span><br><span class="line">this.G = g;</span><br><span class="line">F = G + H;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Astar.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Astar : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">private int mapWidth = 8;</span><br><span class="line">private int mapHeight = 6;</span><br><span class="line">private Point[,] map = new Point[8,6];</span><br><span class="line"></span><br><span class="line">void Start () &#123;</span><br><span class="line">InitMap ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//初始化地图</span><br><span class="line">private void InitMap()&#123;</span><br><span class="line">for (int x = 0; x &lt; mapWidth; x++) &#123;</span><br><span class="line">for (int y = 0; y &lt; mapHeight; y++) &#123;</span><br><span class="line">map [x, y] = new Point (x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                map [4, 2].isWall = true;</span><br><span class="line">map [4, 3].isWall = true;</span><br><span class="line">map [4, 4].isWall = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>下边是核心算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">private void FindPath(Point start, Point end)&#123;</span><br><span class="line">//核心算法</span><br><span class="line">List&lt;Point&gt; openList = new List&lt;Point&gt;();</span><br><span class="line">List&lt;Point&gt; closeList = new List&lt;Point&gt; ();</span><br><span class="line">openList.Add (start);</span><br><span class="line">while (openList.Count &gt; 0) &#123;</span><br><span class="line">Point point = FindMinFOfPoint (openList);</span><br><span class="line">openList.Remove (point);</span><br><span class="line">closeList.Add (point);</span><br><span class="line">List&lt;Point&gt; surroundPoints = GetSurroundPoints (point);</span><br><span class="line">PointsFilter (surroundPoints, closeList);</span><br><span class="line">foreach (Point surroundPoint in surroundPoints) &#123;</span><br><span class="line">if (openList.IndexOf (surroundPoint) &gt; -1) &#123;</span><br><span class="line">float nowG = CalcG (surroundPoint, point);</span><br><span class="line">if (nowG &lt; surroundPoint.G) &#123;</span><br><span class="line">surroundPoint.UpdateParent (point, nowG);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">surroundPoint.Parent = point;</span><br><span class="line">CalcF (surroundPoint, end);</span><br><span class="line">openList.Add (surroundPoint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//判断 end 是否在“开启列表”中</span><br><span class="line">if(openList.IndexOf(end) &gt; -1)&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//对集合进行过滤，因为添加到“关闭列表”中的点不需要被“开启列表”考虑</span><br><span class="line">private void PointsFilter(List&lt;Point&gt; src, List&lt;Point&gt; closeList)&#123;</span><br><span class="line">foreach (Point p in closeList) &#123;</span><br><span class="line">if (src.IndexOf (p) &gt; -1) &#123;</span><br><span class="line">src.Remove (p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//得到周围的点</span><br><span class="line">private List&lt;Point&gt; GetSurroundPoints(Point point)&#123;</span><br><span class="line">Point up = null, down = null, left = null, right = null;</span><br><span class="line">Point lu = null, ru = null, ld = null, rd = null;</span><br><span class="line">//添加上下左右四个点</span><br><span class="line">if (point.Y &lt; mapHeight - 1)&#123;</span><br><span class="line">up = map [point.X, point.Y + 1];</span><br><span class="line">&#125;</span><br><span class="line">if (point.Y &gt; 0) &#123;</span><br><span class="line">down = map [point.X, point.Y - 1];</span><br><span class="line">&#125;</span><br><span class="line">if (point.X &gt; 0) &#123;</span><br><span class="line">left = map [point.X - 1, point.Y];</span><br><span class="line">&#125;</span><br><span class="line">if (point.X &lt; mapWidth - 1) &#123;</span><br><span class="line">right = map [point.X + 1, point.Y];</span><br><span class="line">&#125;</span><br><span class="line">//添加四个左上，左下，右上，右下四个点</span><br><span class="line">if(up != null &amp;&amp; left != null)&#123;</span><br><span class="line">lu = map [point.X - 1, point.Y + 1];</span><br><span class="line">&#125;</span><br><span class="line">if(up != null &amp;&amp; right != null)&#123;</span><br><span class="line">ru = map [point.X + 1, point.Y + 1];</span><br><span class="line">&#125;</span><br><span class="line">if(down != null &amp;&amp; left != null)&#123;</span><br><span class="line">ld = map [point.X - 1, point.Y - 1];</span><br><span class="line">&#125;</span><br><span class="line">if(down != null &amp;&amp; right != null)&#123;</span><br><span class="line">rd = map [point.X + 1, point.Y - 1];</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Point&gt; list = new List&lt;Point&gt; ();</span><br><span class="line">if (down != null &amp;&amp; down.isWall == false) &#123;</span><br><span class="line">list.Add (down);</span><br><span class="line">&#125;</span><br><span class="line">if (up != null &amp;&amp; up.isWall == false) &#123;</span><br><span class="line">list.Add (up);</span><br><span class="line">&#125;</span><br><span class="line">if (left != null &amp;&amp; left.isWall == false) &#123;</span><br><span class="line">list.Add (left);</span><br><span class="line">&#125;</span><br><span class="line">if (right != null &amp;&amp; right.isWall == false) &#123;</span><br><span class="line">list.Add (right);</span><br><span class="line">&#125;</span><br><span class="line">if (lu != null &amp;&amp; lu.isWall == false &amp;&amp; left.isWall == false &amp;&amp; up.isWall == false) &#123;</span><br><span class="line">list.Add (lu);</span><br><span class="line">&#125;</span><br><span class="line">if (ld != null &amp;&amp; ld.isWall == false &amp;&amp; left.isWall == false &amp;&amp; down.isWall == false) &#123;</span><br><span class="line">list.Add (ld);</span><br><span class="line">&#125;</span><br><span class="line">if (ru != null &amp;&amp; ru.isWall == false &amp;&amp; right.isWall == false &amp;&amp; up.isWall == false) &#123;</span><br><span class="line">list.Add (ru);</span><br><span class="line">&#125;</span><br><span class="line">if (rd != null &amp;&amp; rd.isWall == false &amp;&amp; right.isWall == false &amp;&amp; down.isWall == false) &#123;</span><br><span class="line">list.Add (rd);</span><br><span class="line">&#125;</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//从“开启列表”中查找 F 值最小的</span><br><span class="line">private Point FindMinFOfPoint(List&lt;Point&gt; openList)&#123;</span><br><span class="line">float f = float.MaxValue;</span><br><span class="line">Point temp = null;</span><br><span class="line">foreach (Point p in openList) &#123;</span><br><span class="line">if (p.F &lt; f) &#123;</span><br><span class="line">temp = p;</span><br><span class="line">f = p.F;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private float CalcG(Point now, Point parent)&#123;</span><br><span class="line">return Vector2.Distance (new Vector2 (now.X, now.Y), new Vector2 (parent.X, parent.Y)) + parent.G;</span><br><span class="line">&#125;</span><br><span class="line">//计算 F 值</span><br><span class="line">private void CalcF(Point now, Point end)&#123;</span><br><span class="line">//F = G + H</span><br><span class="line">float h = Mathf.Abs(end.X - now.X) + Mathf.Abs(end.Y - now.Y);</span><br><span class="line">float g = 0;</span><br><span class="line"></span><br><span class="line">//没有父节点，只有开始节点没有父节点</span><br><span class="line">if (now.Parent == null) &#123;</span><br><span class="line">g = 0;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">g = Vector2.Distance (new Vector2 (now.X, now.Y), new Vector2 (now.Parent.X, now.Parent.Y)) + now.Parent.G;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float f = g + h;</span><br><span class="line">now.F = f;</span><br><span class="line">now.G = g;</span><br><span class="line">now.H = h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="算法" scheme="http://gyunch.org/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Ulysses</title>
    <link href="http://gyunch.org/2017/05/13/Ulysses/"/>
    <id>http://gyunch.org/2017/05/13/Ulysses/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2018-06-05T12:50:33.497Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><hr><p><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-05-31022057_1480578788666.png" alt=""></p><h3 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h3><blockquote><p>Markdown是一种轻量级的「标记语言」，是由约翰·格鲁伯（John Gruber）和亚伦·斯沃茨（Aaron Swartz）创建的。它允许人们使用纯文本格式编写文档，然后根据其中的标记转换成有效的XHTML（常用的就是HTML）文档。       </p></blockquote><h2 id="Ulysses的好处"><a href="#Ulysses的好处" class="headerlink" title="Ulysses的好处"></a>Ulysses的好处</h2><h3 id="1-Write-Anywhere-at-Anytime！"><a href="#1-Write-Anywhere-at-Anytime！" class="headerlink" title="1.Write Anywhere at Anytime！"></a><strong>1.Write Anywhere at Anytime！</strong></h3><blockquote><p>Ulysses 提供了苹果设备的全平台支持，基于 iCloud 和 Hand Off，你可以随时在 Mac、iPhone 和 iPad 上写作。</p></blockquote><h3 id="2-文档的集中管理"><a href="#2-文档的集中管理" class="headerlink" title="2.文档的集中管理"></a><strong>2.文档的集中管理</strong></h3><blockquote><p>它把所有的文件都存放在了自己设计的文件系统里，你可以在 iCloud 里建立多个分组，每个分组下可以再建立子分组，也可以直接创建文章。</p></blockquote><p><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-05-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-05%20%E4%B8%8B%E5%8D%881.58.08.png" alt=""></p><h3 id="3-多文档输出"><a href="#3-多文档输出" class="headerlink" title="3.多文档输出"></a><strong>3.多文档输出</strong></h3><blockquote><p>支持Markdown格式的文本、RTF、PDF文档输出</p></blockquote><p><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-05-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-05%20%E4%B8%8B%E5%8D%882.04.33.png" alt=""></p><h3 id="4-搜索功能"><a href="#4-搜索功能" class="headerlink" title="4.搜索功能"></a><strong>4.搜索功能</strong></h3><blockquote><p>可以在应用内实现单篇文章搜索，组内搜索和全局搜索，当然，替换也是基本功能。</p></blockquote><p><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-05-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-05%20%E4%B8%8B%E5%8D%881.59.10.png" alt=""></p><h3 id="5-沉浸式写作"><a href="#5-沉浸式写作" class="headerlink" title="5.沉浸式写作"></a><strong>5.沉浸式写作</strong></h3><blockquote><p>Ulysses 的 UI 做得美轮美奂，精良无匹。你能想到的各种模式主题，尤利西斯都提供了，打字机、突出显示当前行、黑暗主题、分页模式，等等。再一次，它在每个设备上的表现都如此出色，让人写不释手。</p></blockquote><p><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-05-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-05%20%E4%B8%8B%E5%8D%881.56.00.png" alt=""><br><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-05-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-05%20%E4%B8%8B%E5%8D%881.56.19.png" alt=""></p><h3 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a><strong>6.其他</strong></h3><blockquote><p>Ulysses 还提供了一些有趣的特性，比如目标。当你为一篇文章设置了目标（字数）之后，文章的左上角就会出现一个进度圆环，随着文字的增加，当这个圆环充满的时候，你的文章差不多也写完了。</p></blockquote><h3 id="7-没有第七了"><a href="#7-没有第七了" class="headerlink" title="7.没有第七了"></a><strong>7.没有第七了</strong></h3><blockquote><p>事实上 Ulysses 的功能比我说的要丰富的多，他们的 Blog 也写得十分有趣，有兴趣可以去读读。<br><a href="http://ulyssesapp.com/blog" target="_blank" rel="noopener">http://ulyssesapp.com/blog</a></p></blockquote><h2 id="Ulysses与同类产品的对比"><a href="#Ulysses与同类产品的对比" class="headerlink" title="Ulysses与同类产品的对比"></a>Ulysses与同类产品的对比</h2><h3 id="Byword"><a href="#Byword" class="headerlink" title="Byword"></a><strong>Byword</strong></h3><p><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-06-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-06%20%E4%B8%8B%E5%8D%882.25.17.png" alt=""></p><blockquote><p>Byword没有Ulysses的多功能，没有分栏即时预览，不能导入外部 CSS 也不能更改输出样式。你能做的就是挑个喜欢的字体，找个喜欢的界面风格。<br>Ulysses拥有Byword和iA Writer 优秀的专注模式————<em>打字机滚动、突出显示当前行、显示段落号</em></p></blockquote><h3 id="iA-Writer"><a href="#iA-Writer" class="headerlink" title="iA Writer"></a><strong>iA Writer</strong></h3><p><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-06-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-06%20%E4%B8%8B%E5%8D%882.24.36.png" alt=""></p><blockquote><p>iA Writer 的写作体验依然是非常优秀的,其定制功能同样不逊于Ulysses,比较遗憾的是，iA Writer 的属性更像是一个写字板，而非是一个工作台。它的文档管理功能可以说是聊胜于无，在写完一篇文档之后，我都需要纠结一下这份文档需要放在电脑的哪个位置比较合适。<br>Ulysses也支持Byword、iA Write所提倡的无干扰写作模式</p></blockquote><p><img src="http://obq4n17fq.bkt.clouddn.com/2017-09-06-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-06%20%E4%B8%8B%E5%8D%882.27.53.png" alt=""></p><h2 id="Ulysses的缺点"><a href="#Ulysses的缺点" class="headerlink" title="Ulysses的缺点"></a>Ulysses的缺点</h2><h3 id="我个人认为Ulysses最大的缺点是，并没有实时预览功能，但如果加入实时预览就必然会抛弃无干扰写作模式，这一点见仁见智"><a href="#我个人认为Ulysses最大的缺点是，并没有实时预览功能，但如果加入实时预览就必然会抛弃无干扰写作模式，这一点见仁见智" class="headerlink" title="我个人认为Ulysses最大的缺点是，并没有实时预览功能，但如果加入实时预览就必然会抛弃无干扰写作模式，这一点见仁见智"></a><strong>我个人认为Ulysses最大的缺点是，并没有实时预览功能，但如果加入实时预览就必然会抛弃无干扰写作模式，这一点见仁见智</strong></h3><hr><h3 id="Ulysses在诸多写作软件中，并未有很大的亮点和创新，但能在这些软件中脱颖而出的主要原因是其包含了，亦可认作是整合了其他「具有个性的」Markdown-编辑器的特色功能"><a href="#Ulysses在诸多写作软件中，并未有很大的亮点和创新，但能在这些软件中脱颖而出的主要原因是其包含了，亦可认作是整合了其他「具有个性的」Markdown-编辑器的特色功能" class="headerlink" title="Ulysses在诸多写作软件中，并未有很大的亮点和创新，但能在这些软件中脱颖而出的主要原因是其包含了，亦可认作是整合了其他「具有个性的」Markdown 编辑器的特色功能"></a><strong>Ulysses在诸多写作软件中，并未有很大的亮点和创新，但能在这些软件中脱颖而出的主要原因是其包含了，亦可认作是整合了其他「具有个性的」Markdown 编辑器的特色功能</strong></h3><h3 id="总之，Ulysses-足够优雅和简洁。它将写作之外的一切事物包揽，而你需要做的，只剩下创作"><a href="#总之，Ulysses-足够优雅和简洁。它将写作之外的一切事物包揽，而你需要做的，只剩下创作" class="headerlink" title="总之，Ulysses 足够优雅和简洁。它将写作之外的一切事物包揽，而你需要做的，只剩下创作"></a><strong>总之，Ulysses 足够优雅和简洁。它将写作之外的一切事物包揽，而你需要做的，只剩下创作</strong></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="文章" scheme="http://gyunch.org/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="写作" scheme="http://gyunch.org/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>MVC</title>
    <link href="http://gyunch.org/2017/03/22/MVC/"/>
    <id>http://gyunch.org/2017/03/22/MVC/</id>
    <published>2017-03-21T16:00:00.000Z</published>
    <updated>2018-06-04T06:39:57.138Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="MVC概述"><a href="#MVC概述" class="headerlink" title="MVC概述"></a><strong>MVC概述</strong></h2><ul><li>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范。</li><li>根据名称定义在MVC中可以分为三层，也就是Model 层，View 层，Controller 控制层</li><li><blockquote><p><strong>Model(模型)</strong> :“数据模型”（Model）用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。模型有对数据直接访问的权力，例如对数据库的访问。模型不依赖视图和控制器，也就是说，模型不关心它会被如何显示或是如何被操作。但是模型中数据的变化一般会通过一种刷新机制被公布。为了实现这种机制，那些用于监视此模型的视图必须事先在此模型上注册，从而，视图可以了解在数据模型上发生的改变。  </p><p><strong>View(视图)</strong> :视图层能够实现数据有目的的显示（理论上，这不是必需的）。在视图中一般没有程序上的逻辑。为了实现视图上的刷新功能，视图需要访问它监视的数据模型（Model），因此应该事先在被它监视的数据那里注册。  </p><p><strong>Controller(控制器)</strong> :控制器起到不同层面间的组织作用，用于控制应用程序的流程。它处理事件并作出响应。事件包括用户的行为和数据模型上的改变  </p></blockquote></li></ul><p>下图展现了MVC不同层的类型和功能：<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1frs3s90gq2j31kw0upq8e.jpg" alt=" "></p><hr><h2 id="Unity中的MVC"><a href="#Unity中的MVC" class="headerlink" title="Unity中的MVC"></a><strong>Unity中的MVC</strong></h2><ul><li>在unity中常见并在大型项目中常用到的的ui框架有基于MVVM的uFrame、基于MVC的PureMVC和基于MVCS的StrangeIoC，三者各有优劣。关于这三个框架及MVVM和MVCS的结构我们之后再说，这里通过代码来了解一下在Unity中的MVC：</li></ul><blockquote><p>mvc核心控制类:<br>MVC.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// puremvc核心控制器</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class MVC : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private static Dictionary&lt;string, Model&gt; Models = new Dictionary&lt;string, Model&gt;();</span><br><span class="line">    private static Dictionary&lt;string, View&gt; Views = new Dictionary&lt;string, View&gt;();</span><br><span class="line">    private static Dictionary&lt;string, Type&gt; Commands = new Dictionary&lt;string, Type&gt;();</span><br><span class="line"></span><br><span class="line">    #region Model Method</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 注册model</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;model&quot;&gt;Model.&lt;/param&gt;</span><br><span class="line">    public static void RegisterModel(Model model)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!Models.ContainsKey(model.Name))</span><br><span class="line">        &#123;</span><br><span class="line">            Models.Add(model.Name, model);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void UnRegisterModel(Model model)</span><br><span class="line">    &#123;</span><br><span class="line">        if (Models.ContainsKey(model.Name))</span><br><span class="line">        &#123;</span><br><span class="line">            Models.Remove(model.Name);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static T GetModel&lt;T&gt;(string name) where T : Model</span><br><span class="line">    &#123;</span><br><span class="line">        foreach (string n in Models.Keys)</span><br><span class="line">        &#123;</span><br><span class="line">            if (n == name)</span><br><span class="line">            &#123;</span><br><span class="line">                return Models[name] as T;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #endregion</span><br><span class="line"></span><br><span class="line">    #region View Method</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 注册view</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;view&quot;&gt;View.&lt;/param&gt;</span><br><span class="line">    public static void RegisterView(View view)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!Views.ContainsKey(view.Name))</span><br><span class="line">        &#123;</span><br><span class="line">            Views.Add(view.Name, view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void UnRegisterView(View view)</span><br><span class="line">    &#123;</span><br><span class="line">        if (Views.ContainsKey(view.Name))</span><br><span class="line">        &#123;</span><br><span class="line">            Views.Remove(view.Name);</span><br><span class="line">            view.RegisterNotification();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static T GetView&lt;T&gt;(string name) where T : View</span><br><span class="line">    &#123;</span><br><span class="line">        foreach (string n in Views.Keys)</span><br><span class="line">        &#123;</span><br><span class="line">            if (n == name)</span><br><span class="line">            &#123;</span><br><span class="line">                return Views[name] as T;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    #endregion</span><br><span class="line"></span><br><span class="line">    #region Command Method</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 注册controller</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;name&quot;&gt;Name.&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;type&quot;&gt;Type.&lt;/param&gt;</span><br><span class="line">    public static void RegisterCommand(string name, Type type)&#123;</span><br><span class="line">        if (!Commands.ContainsKey(name))&#123;</span><br><span class="line">            Commands.Add(name, type);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void UnRegisterCommand(string name, Type type)&#123;</span><br><span class="line">        if(Commands.ContainsKey(name))&#123;</span><br><span class="line">            Commands.Remove(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void HandleNotifition(string name, object data = null)&#123;</span><br><span class="line">        //判断事件是否存在，如果存在则实例化对象并执行事件</span><br><span class="line">        if(Commands.ContainsKey(name))&#123;</span><br><span class="line">            Controller command = Activator.CreateInstance(Commands[name]) as Controller;</span><br><span class="line">            command.Execute(data);</span><br><span class="line">        &#125;</span><br><span class="line">        //判断视图是否关注该事件，如果关注则执行事件</span><br><span class="line">        foreach(View view in Views.Values)&#123;</span><br><span class="line">            if (view.ContainsNotification(name))&#123;</span><br><span class="line">                view.HandleNotification(name, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #endregion</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Model基类<br>Model.cs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// mvc中的Model基类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public abstract class Model&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// model的名字</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;value&gt;The name.&lt;/value&gt;</span><br><span class="line">    public abstract string Name &#123; get; &#125; </span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 发送通知</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;name&quot;&gt;事件名称&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;data&quot;&gt;事件执行参数&lt;/param&gt;</span><br><span class="line">    public virtual void SendNotification(string name, object data = null)&#123;</span><br><span class="line">        MVC.HandleNotifition(name, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>View基类<br>View.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// mvc中的View基类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public abstract class View&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// View的名字</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;value&gt;The name.&lt;/value&gt;</span><br><span class="line">    public abstract string Name &#123; get; &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 发送通知</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;name&quot;&gt;事件名称&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;data&quot;&gt;事件执行参数&lt;/param&gt;</span><br><span class="line">    public virtual void SendNotification(string name, object data = null)&#123;</span><br><span class="line">        MVC.HandleNotifition(name, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 获取模型model</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;returns&gt;The model.&lt;/returns&gt;</span><br><span class="line">    /// &lt;param name=&quot;name&quot;&gt;model名称&lt;/param&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;T&quot;&gt;The 1st type parameter.&lt;/typeparam&gt;</span><br><span class="line">    public T GetModel&lt;T&gt;(string name) where T : Model&#123;</span><br><span class="line">        return MVC.GetModel&lt;T&gt;(name) as T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 保存通知 </span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    private List&lt;string&gt; InterestNotification = new List&lt;string&gt;();</span><br><span class="line"></span><br><span class="line">    public virtual void RegisterNotification()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public bool ContainsNotification(string name)&#123;</span><br><span class="line">        return InterestNotification.Contains(name);</span><br><span class="line">    &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 处理事件</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;name&quot;&gt;事件名称&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;data&quot;&gt;事件参数&lt;/param&gt;</span><br><span class="line">    public virtual void HandleNotification(string name, object data = null)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Controller基类<br>Controller.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// mvc中的Controller基类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public abstract class Controller</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// Controller的名字</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;value&gt;The name.&lt;/value&gt;</span><br><span class="line">    public abstract string Name &#123; get; &#125;</span><br><span class="line"></span><br><span class="line">    public T GetModel&lt;T&gt;(string name) where T : Model</span><br><span class="line">    &#123;</span><br><span class="line">        return MVC.GetModel&lt;T&gt;(name);</span><br><span class="line">    &#125;</span><br><span class="line">    public T GetView&lt;T&gt;(string name) where T : View</span><br><span class="line">    &#123;</span><br><span class="line">        return MVC.GetView&lt;T&gt;(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void RegisterView(View view)</span><br><span class="line">    &#123;</span><br><span class="line">        MVC.RegisterView(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void RegisterModel(Model model)</span><br><span class="line">    &#123;</span><br><span class="line">        MVC.RegisterModel(model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void RegisterCommand(string name, Type type)</span><br><span class="line">    &#123;</span><br><span class="line">        MVC.UnRegisterCommand(name, type);</span><br><span class="line">    &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 发送通知</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;data&quot;&gt;事件执行参数&lt;/param&gt;</span><br><span class="line">    public abstract void Execute(object data = null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a><strong>写在最后</strong></h2><ul><li>这里介绍了unity中MVC的简单使用，于我看来，在游戏项目中MVC框架并不完全适用，MVC是ui专用的模式，游戏不同于web前端，不同类型的游戏其架构相差非常之大（比如棋牌类游戏，rpg游戏，moba类游戏，跑酷类游戏之间的差别） ，所以游戏中MVC不同的模块很难有非常清晰的定义。并不是说MVC在游戏项目中完全没用，但只有它还远远不够。游戏项目最合理的方式是由主程根据项目需求制定一套新的结构和各部分的依赖关系，并事先想好各部分的扩展和通信方式。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="框架" scheme="http://gyunch.org/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>产品经理基础手册</title>
    <link href="http://gyunch.org/2016/12/08/Product%20Manager/"/>
    <id>http://gyunch.org/2016/12/08/Product Manager/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2018-06-06T09:31:42.837Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="什么是产品经理"><a href="#什么是产品经理" class="headerlink" title="什么是产品经理"></a><strong>什么是产品经理</strong></h2><p>产品经理（Product Manager）是 企业中专门负责产品管理的职位，产品经理负责市场调查并根据用户的需求，确定开发何种产品，选择何种技术、商业模式等。并推动相应产品的开发组织，他还要根据产品的生命周期，协调 研发、运营、营销等，确定和组织实施相应的产品策略，以及其他一系列相关的产品管理活动。<br>（来源：<a href="https://baike.baidu.com/item/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/11013391?fr=aladdin" target="_blank" rel="noopener">产品经理_百度百科</a>）</p><hr><h2 id="产品部门在公司中的组织结构"><a href="#产品部门在公司中的组织结构" class="headerlink" title="产品部门在公司中的组织结构"></a><strong>产品部门在公司中的组织结构</strong></h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fs1kvsfxumj30se0inn19.jpg" alt=" "></p><hr><h2 id="完整的产品案例"><a href="#完整的产品案例" class="headerlink" title="完整的产品案例"></a><strong>完整的产品案例</strong></h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fs1kwaoo0dj30z40gy78h.jpg" alt=" "></p><hr><h2 id="产品经理发展线"><a href="#产品经理发展线" class="headerlink" title="产品经理发展线"></a><strong>产品经理发展线</strong></h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fs1kwqu2n7j30tp0m2te1.jpg" alt=" "></p><hr><h2 id="产品经理职责"><a href="#产品经理职责" class="headerlink" title="产品经理职责"></a><strong>产品经理职责</strong></h2><ol><li>从兴趣爱好聊出痛点发现用户需求</li><li>找到目标用户找到有该需求的其他用户</li><li>开始需求调研进行需求调研，输出需求调研问卷，记录用户调研明细，输出访谈结果汇总</li><li>提炼用户画像把用户访谈结果抽象成三类用户画像，方便研发理解需求的直接使用对象</li><li>写竞品分析撰写竞品分析，了解满足当前需求的竞品情况，看看是否有，以及有的话，如何借鉴和超越</li><li>用思维导图梳理功能结构化梳理满足需求功能的更为细分的子功能，并找老大做需求优先级排期</li><li>绘制流程图梳理满足用户需求方案的整个流程，细化业务逻辑</li><li>画产品原型结合自己的前期的准备和产品知识储备，输出符合要求的产品原型</li><li>写需求文档撰写用于研发、测试、UI等同事开展后续工作的需求说明文档</li><li>需求评审发会议邮件，约项目组相关人一起进行需求宣讲</li><li>项目管理对子项目功能(大功能)进行排期，找相关同事进行确认。</li><li>提测、验收和上线确人设计稿，解决在开发过程中遇到的问题，提测后，进行验收功能是否正确，UI还原是否正确，确认完成后，准备上线的物料，提App包到各大应用商店</li><li>版本迭代关注数据和用户反馈，收集整理下个版本的需求，列出优先级，准备下一版本的需求</li></ol><hr><p>以上是产品经理的基本介绍，在之后我会抽时间通过一个我之前做的完整的案例以详细介绍产品经理的职责和技能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="产品" scheme="http://gyunch.org/categories/%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="PM" scheme="http://gyunch.org/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>GameManager</title>
    <link href="http://gyunch.org/2016/10/18/GameManager/"/>
    <id>http://gyunch.org/2016/10/18/GameManager/</id>
    <published>2016-10-17T16:00:00.000Z</published>
    <updated>2018-06-06T15:50:10.836Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><p><strong>这片文章主要介绍之前的项目中使用过的各类管理器</strong></p><hr><h2 id="组建单例模版类"><a href="#组建单例模版类" class="headerlink" title="组建单例模版类"></a><strong>组建单例模版类</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 组建单例模版</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class AD_MonoSingleten&lt;T&gt; : MonoBehaviour where T : MonoBehaviour&#123;</span><br><span class="line">    private static T instance;</span><br><span class="line">    public static T Instance&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            if (instance == null)&#123;</span><br><span class="line">                GameObject go = new GameObject(typeof(T).Name);</span><br><span class="line">                instance = go.AddComponent&lt;T&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            instance = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected virtual void Awake()&#123;</span><br><span class="line">        Instance = this as T;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="预制体管理器"><a href="#预制体管理器" class="headerlink" title="预制体管理器"></a>预制体管理器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 文件名：AD_PrefabManager</span><br><span class="line">/// 功能说明：预制体管理器</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">public class AD_PrefabManager : AD_Singleton&lt;AD_PrefabManager&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 实例化预制体</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span><br><span class="line">    /// &lt;param name=&quot;name&quot;&gt;&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public GameObject Spawn(AD_PrefabType type, string name, Vector3 pos, Quaternion rotation, Transform parent)</span><br><span class="line">    &#123;</span><br><span class="line">        string path = AD_ResourcesPath.GetPath(type, name);</span><br><span class="line">        GameObject obj = AD_ResourceFactory.Instance.Load&lt;GameObject&gt;(path);</span><br><span class="line">        if(obj != null)</span><br><span class="line">        &#123;</span><br><span class="line">            obj = GameObject.Instantiate(obj) as GameObject;</span><br><span class="line">            obj.transform.SetParent(parent);</span><br><span class="line">            obj.transform.localPosition = pos;</span><br><span class="line">            obj.transform.localRotation = rotation;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(&quot;perfab not find !&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public GameObject Spawn(AD_PrefabType type, string name)</span><br><span class="line">    &#123;</span><br><span class="line">        return Spawn(type, name, Vector3.zero,  Quaternion.identity, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public GameObject Spawn(AD_PrefabType type, string name, Transform parent)</span><br><span class="line">    &#123;</span><br><span class="line">        return Spawn(type, name, Vector3.zero, Quaternion.identity, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="音效管理器"><a href="#音效管理器" class="headerlink" title="音效管理器"></a><strong>音效管理器</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 文件名:AD_AudioManager</span><br><span class="line">/// 功能说明:音效管理器</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">[RequireComponent(typeof(AudioSource))]</span><br><span class="line">public class AD_AudioManager : AD_MonoSingleton&lt;AD_AudioManager&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private AudioSource mAudioSource;</span><br><span class="line"></span><br><span class="line">    protected override void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        base.Awake();</span><br><span class="line">        mAudioSource = GetComponent&lt;AudioSource&gt;();</span><br><span class="line">        // 跨场景不销毁</span><br><span class="line">        DontDestroyOnLoad(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 播放背景音乐</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;audioName&quot;&gt;&lt;/param&gt;</span><br><span class="line">    public void PlayBGAudio(string audioName)</span><br><span class="line">    &#123;</span><br><span class="line">        // 加载背景音乐</span><br><span class="line">        AudioClip bg = AD_ResourceFactory.Instance.Load&lt;AudioClip&gt;(AD_ResourcesPath.Audio_Environment + audioName);</span><br><span class="line">        // 设置背景音乐</span><br><span class="line">        mAudioSource.clip = bg;</span><br><span class="line">        // 循环播放</span><br><span class="line">        mAudioSource.loop = true;</span><br><span class="line">        // 播放</span><br><span class="line">        mAudioSource.Play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 播放指定音乐</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;audioName&quot;&gt;&lt;/param&gt;</span><br><span class="line">    public void PlayAudio(AD_AudioType type, string audioName)</span><br><span class="line">    &#123;</span><br><span class="line">        string path = AD_ResourcesPath.GetPath(type, audioName);</span><br><span class="line">        AudioClip clip = AD_ResourceFactory.Instance.Load&lt;AudioClip&gt;(path);</span><br><span class="line">        AudioSource.PlayClipAtPoint(clip, transform.position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="场景加载管理器"><a href="#场景加载管理器" class="headerlink" title="场景加载管理器"></a><strong>场景加载管理器</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 文件名：AD_Singleton</span><br><span class="line">/// 功能说明：场景单例</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class AD_Singleton&lt;T&gt; where T : new() &#123;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 场景单例</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">private static readonly T instance = new T();</span><br><span class="line">public static T Instance &#123;</span><br><span class="line">get&#123;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 文件名:AD_ScenesManager</span><br><span class="line">/// 功能说明:场景加载管理器</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class AD_ScenesManager : AD_Singleton&lt;AD_ScenesManager&gt; &#123;</span><br><span class="line">private string sceneName;  // 切换场景名</span><br><span class="line">private AsyncOperation asyncOper;</span><br><span class="line">private float progress; // 进度</span><br><span class="line">public float Progress&#123;</span><br><span class="line">get&#123;</span><br><span class="line">return progress;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 场景切换</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;sceneName&quot;&gt;Scene name.&lt;/param&gt;</span><br><span class="line">public void LoadScene(string sceneName)&#123;</span><br><span class="line">this.sceneName = sceneName;</span><br><span class="line">SceneManager.LoadScene (ScenesName.SceneLoading);</span><br><span class="line">&#125;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 异步加载场景</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;returns&gt;The scene async.&lt;/returns&gt;</span><br><span class="line">public IEnumerator LoadSceneAsync()&#123;</span><br><span class="line">asyncOper = SceneManager.LoadSceneAsync (sceneName);</span><br><span class="line">//阻止场景自动跳转</span><br><span class="line">AudioManager.Instance.PlayBG(&quot;Sound_SceneLoding&quot;);</span><br><span class="line">asyncOper.allowSceneActivation = false;</span><br><span class="line">//场景过度进度</span><br><span class="line">while(asyncOper.progress &lt; 0.9f)&#123;</span><br><span class="line">progress += 0.005f;</span><br><span class="line">yield return 0;</span><br><span class="line">&#125; </span><br><span class="line">while (progress &lt; 1) &#123;</span><br><span class="line">progress += 0.005f;</span><br><span class="line">yield return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AudioManager.Instance.PlayBG (&quot;Sound_Background&quot;);</span><br><span class="line">asyncOper.allowSceneActivation = true;</span><br><span class="line"></span><br><span class="line">yield return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong><a href="http://gyunch.org/2016/08/15/FSM/">有限状态机管理器</a>，<a href="http://gyunch.org/2016/08/10/unityObject%20pool/">对象池管理器</a> </strong>在之前有写过</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="应用模块" scheme="http://gyunch.org/tags/%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Shader入门</title>
    <link href="http://gyunch.org/2016/09/07/ShaderBasics/"/>
    <id>http://gyunch.org/2016/09/07/ShaderBasics/</id>
    <published>2016-09-06T16:00:00.000Z</published>
    <updated>2018-05-24T07:33:49.751Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="渲染流水线"><a href="#渲染流水线" class="headerlink" title="渲染流水线"></a><strong>渲染流水线</strong></h2><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><ul><li>在了解什么是渲染流水线前先看一下现实生活中的<strong>流水线</strong>。<blockquote><p>流水线是一种工业上的生产方式，每一个生产单位只专注处理一个片段的工作。<br>比如一个制造手机的工厂，一台手机的制造流程可以分为四个步骤，第一步，制作外壳；第二步，制作屏幕模组；第三步，制作主板；第四步组装手机并进行产品包装。<br>在没有流水线时，只有在每台手机四个工序完成后才能开始制作下一台，这是非常耗时的。<br>如果我们加入流水线，虽然制作一台手机任需要四个步骤，但不需要从头到尾完成全部步骤，而是每个步骤由专人来完成，所有步骤并行进行。<br>使用流水线的好处在于可以提高单位时间的生产量。  </p></blockquote></li></ul><h3 id="渲染流水线-1"><a href="#渲染流水线-1" class="headerlink" title="渲染流水线"></a>渲染流水线</h3><ul><li>流水线的概念同样可以用于计算机的图像渲染中。计算机需要从一系列的顶点数据、纹理等信息出发，把这些信息最终转换成一张人眼可以观察到的图像。这个工作通常有CPU和GPU共同完成</li><li>渲染流水线通常分为三个阶段：应用阶段 ———&gt; 几何阶段 ————&gt; 光栅化阶段<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frmelhilk7j30f006emx8.jpg" alt=" "></li></ul><ol><li>应用阶段： 这个阶段有应用主导，通常由CPU负责实现。这一阶段开发者有三个主要任务，首先，需要准备好场景数据（摄相机位置、视锥体、模型和光源等）。其次，为了提高渲染性能，需要做粗粒度的剔除工作。最后，需要设置好每个模型的渲染状态（使用的材质、使用的纹理、使用的Shader等）这一阶段最重要的输出是渲染所需的几何信息，即渲染图元。</li><li>几何阶段：几何阶段主要用于处理所有和我们绘制的几何相关的事情。几何阶段负责和每个渲染图元打交道，进行逐顶点、逐多边形的操作。这个阶段可以进一步分成更小的流水线阶段。几何阶段的一个重要任务就是把顶点坐标变换到屏幕空间中，再交给光栅器进行处理。</li><li>光栅化阶段： 这一阶段会使用上个阶段传递的数据来产生屏幕上的像素，并渲染出最终的图像。</li></ol><hr><h2 id="CPU和GPU之间的通信"><a href="#CPU和GPU之间的通信" class="headerlink" title="CPU和GPU之间的通信"></a><strong>CPU和GPU之间的通信</strong></h2><p>渲染流水线的起点是CPU，即应用阶段。大致可分为三个阶段：</p><ol><li>把数据加载到显存中：所有渲染所需的数据都需要从硬盘中加载到系统内存，然后，网格和纹理等数据又被加载到显存。</li><li>设置渲染状态：这些状态定义了场景中的网格如何被渲染。</li><li>调用Draw Call：Draw Call实际上就是一个命令，它的发起方是CPU,接收方是GPU，这个命令仅仅会指向一个需要被渲染的图元列表，而不会再包含任何材质信息。 当给定一个Draw Call时，GPU就会根据渲染状态和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的像素。</li></ol><hr><h2 id="GPU流水线"><a href="#GPU流水线" class="headerlink" title="GPU流水线"></a><strong>GPU流水线</strong></h2><ul><li>当GPU从CPU得到渲染命令后，就会进行一系列的流水线操作，最终把图元渲染到屏幕上（就是上边的调用Draw Call）</li><li>对于渲染流水线中的后两个阶段（几何阶段和光栅化阶段）开发者无法拥有绝对的控制权，其实现的载体是GPU。GPU通过实现流水线化，大大加快了渲染速度，虽然我们无法完全控制这两个阶段的实现细节，但其向开发者开放了很多控制权。<br>下图展示了不同流水线阶段以及它们的可配执性和可编程性：<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frmf8dwj2jj30u50eft8r.jpg" alt=" "></li></ul><h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><ul><li>顶点着色器是流水线的第一个阶段，它的输入来自于CPU。顶点着色器的处理单位是顶点,输入进来的每个顶点都会调用一次顶点着色器。顶点着色器本身不可以创建或销毁任何顶点，并无法得到顶点与顶点之间的关系</li><li>顶点着色器是完全可编程的，它通常用于实现顶点的坐标变换和逐顶点光照。<blockquote><p>坐标变换：就是对顶点的坐标进行某种变换—把顶点坐标从模型空间转换到齐次裁剪空间。我们可以通过坐标变换来模拟水面、面料等。  </p></blockquote></li></ul><h3 id="曲面细分着色器"><a href="#曲面细分着色器" class="headerlink" title="曲面细分着色器"></a>曲面细分着色器</h3><ul><li>是一个可选的着色器，主要用于细分图元。</li></ul><h3 id="几何着色器"><a href="#几何着色器" class="headerlink" title="几何着色器"></a>几何着色器</h3><ul><li>是一个可选的着色器，可用于执行逐图元的着色操作，或者被用于产生更多的图元。</li></ul><h3 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h3><ul><li>这一阶段是可配置的。目的是把那些不在视野内的顶点裁剪掉，并剔除某些三角形图元的面片。</li><li>一个图元与摄像机视野的关系有3种：完全在视野内、部分在视野内、完全在视野外。</li></ul><ol><li>完全在视野内的图元会继续传递给下一个流水线阶段</li><li>完全在视野外的图元不会继续向下传递</li><li>部分在视野内的图元需要做裁剪处理<blockquote><p>和顶点着色器不同的是，这一步是不可编程的。我们无法通过编程来控制裁剪的过程，而是硬件上的固定操作。  </p></blockquote></li></ol><h3 id="屏幕映射"><a href="#屏幕映射" class="headerlink" title="屏幕映射"></a>屏幕映射</h3><ul><li>这一阶段是不可配置和编程的，负责把每个图元的坐标转换成屏幕坐标。</li><li>这一步输入的坐标仍然是三维坐标系下的坐标。屏幕映射的任务是把每个图元的x和y坐标转换到屏幕坐标系下。</li><li>屏幕映射得到的屏幕坐标决定了这个顶点对应屏幕上哪个像素以及距离这个像素的距离。<blockquote><p>一个需要注意的地方，屏幕坐标系在OpenGL和DirectX中，OpenGL把屏幕左下角当作最小的窗口坐标值，DirectX则在屏幕左上角为最小窗口坐标值。  </p></blockquote></li></ul><h3 id="三角形设置"><a href="#三角形设置" class="headerlink" title="三角形设置"></a>三角形设置</h3><ul><li>由这一步开始进入光栅化阶段。</li><li>上一阶段输出的信息是屏幕坐标系下的顶点位置以及和它们相关的其他信息，如深度值、法线方向、视角方向等。</li><li>光栅化阶段的目标：1.计算每个图元覆盖了哪些像素 2.为这些像素计算它们的颜色</li><li>三角形设置作为光栅化的第一个阶段，会计算出光栅化一个三角网格所需要的信息。上一阶段的输出是三角网格的顶点，如果想得到整个三角网格的覆盖情况，就必须计算每条边上的像素坐标，为了计算边界像素的坐标信息，我们就需要得到三角形边界的表示方式。这样一个得到三角形边界表示方式的过程就是三角形设置。</li><li>它的输出是为下一个阶段做准备</li></ul><h3 id="三角形遍历"><a href="#三角形遍历" class="headerlink" title="三角形遍历"></a>三角形遍历</h3><ul><li>三角形遍历阶段将会检查每个像素是否被一个三角网格所覆盖。如果被覆盖，就会生成一个片元。而这样一个找到哪些像素被三角网格覆盖的过程，就是三角形遍历，这个阶段也被称为扫描变换。</li><li>三角形遍历阶段会根据上一个阶段的计算结果来判断一个三角网格覆盖了哪些像素，并使用三角网格三个顶点的顶点信息对整个覆盖区域的像素进行插值。</li><li>这一步的输出就是得到一个片元序列。<blockquote><p>一个片元并不是真正意义上的像素，而是包含了很多状态的几何，这些状态用于计算每个像素的最终颜色  </p></blockquote></li></ul><h3 id="片元着色器"><a href="#片元着色器" class="headerlink" title="片元着色器"></a>片元着色器</h3><ul><li>片元着色器是另一个非常重要的可编程着色器阶段，在DirectX中，片元着色器被称为像素着色器。</li><li>片元着色器的输入就是上一阶段对顶点信息插值得到的结果，更具体点说，是根据从顶点着色器中输出的数据插值得到的。而其的输出是一个或者多个颜色值。</li><li>这一阶段可以完成很多重要的渲染技术，如纹理采样，但是它的局限在于，它仅可以影响单个片元。</li></ul><h3 id="逐片元操作"><a href="#逐片元操作" class="headerlink" title="逐片元操作"></a>逐片元操作</h3><ul><li>这是渲染流水线的最后一步，这一步骤的目的是：合并</li><li>这一阶段有几个主要任务：</li></ul><ol><li>决定每个片元的可见性。这涉及了深度测试、模板测试等</li><li>如果一个片元通过了所有的测试，就需要把这个片元的颜色值和已经存储在颜色缓冲区中的颜色进行合并，或者说是混合。<blockquote><p>这一阶段是高度可配置性的  </p></blockquote></li></ol><ul><li>这个阶段首先需要解决每个片元的可见性问题。这需要进行一系列的测试。<blockquote><p>片元 ——&gt; 模版测试 ——&gt; 深度测试 ——&gt; 混合 ——&gt; 颜色缓冲区  </p></blockquote></li></ul><blockquote><p>深度测试和模版测试的简化流程图：<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frmg6jpapzj31gm1feqv5.jpg" alt=" "></p></blockquote><h4 id="模板测试："><a href="#模板测试：" class="headerlink" title="模板测试："></a>模板测试：</h4><p>如果开启了模板测试，GPU会首先读取模板缓冲区中该片元位置的模板值，然后将该值和读取到的参考值（可以开发者自己指定）进行比较，开发者可以设定成小于时舍弃或者大于等于时舍弃该片元。模板测试通常用于限制渲染的区域，另外模板测试还有别的高级用法，如渲染阴影，轮廓渲染。</p><h4 id="深度测试："><a href="#深度测试：" class="headerlink" title="深度测试："></a>深度测试：</h4><p>如果一个片元幸运的通过了模板测试，那么就会进行深度测试，如果开启了深度深度，GPU就会把该片的深度值和已经存在于深度缓冲区中的深度值进行比较，这个比较函数也是由开发者设定的，可以选择大于此值时舍弃也可以选择小于等于此值时舍弃。但通常这个比较函数是小于等于的关系，这是因为我们我们总想只显示出离摄像机最近的物体，而那些被其他物体遮挡的片元就不需要出现在屏幕上。和模板测试不同的是，如果一个片元没有通过深度测试，他就没有权利修改深度缓冲区中的值。而如果通过了测试，开发者可以通开启/关闭深度写入来决定是否要利用这个片元的深度值覆盖缓冲区中的值。</p><h4 id="合并："><a href="#合并：" class="headerlink" title="合并："></a>合并：</h4><p>我们所讨论的渲染过程是一个物体接着一个物体渲染到屏幕上，而每个像素的颜色信息被存储在一个名为颜色缓冲的地方，因此当我们执行这次渲染时，颜色缓冲中往往已经有了上次渲染的颜色结果，那么我们是使用这次渲染得到的颜色完全覆盖掉之前的结果，还是进行其他处理，这就是合并需要解决的问题。<br>对于不透明物体，开发者可以关闭混合操作，这样片元着色器计算得到的颜色值就会直接覆盖掉颜色缓冲区中的像素值。但对于半透明的物体，我们就需要开启混合操作来让这个物体看起来是半透明的。混合操作是高度可配置的，开发者可以选择开启/关闭混合功能。如果开启了，GPU会取出源颜色和目标颜色，将两种颜色进行混合。源颜色是指片元着色器得到的颜色值，而目标颜色则是已经存在于颜色缓冲区中的颜色值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>真正实现渲染流水线的过程远比描述的要复杂，但Unity为我们封装了很多功能，我们只需要在一个Unity Shader设置一些输入、编写顶点着色器和片元着色器、设置一些状态，就可以实现大部分屏幕效果。在最新的unity中还集成了Shader蓝图工具供开发者使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Shader" scheme="http://gyunch.org/categories/Shader/"/>
    
    
      <category term="图形学" scheme="http://gyunch.org/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>K-近邻算法</title>
    <link href="http://gyunch.org/2016/09/02/KNN/"/>
    <id>http://gyunch.org/2016/09/02/KNN/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2018-06-04T06:44:13.182Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="K-近邻算法概述"><a href="#K-近邻算法概述" class="headerlink" title="K-近邻算法概述"></a><strong>K-近邻算法概述</strong></h2><ul><li>简单的说，K-近邻算法采用测量不同特征值之间的距离方法进行分类。</li><li>优点：精度高，对异常值不敏感，无数据输入假定。</li><li>缺点：计算复杂度高，空间复杂度高。</li><li>适用范围：数值型和标称型。</li></ul><hr><h2 id="K-近邻算法工作原理"><a href="#K-近邻算法工作原理" class="headerlink" title="K-近邻算法工作原理"></a><strong>K-近邻算法工作原理</strong></h2><p>存在一个样本数据集合，可以称之为训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类的对应关系。输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最邻近数据的分类标签。一般来说我们只选择样本数据集中前k个最相似的数据，这就是K-近邻算法中k的由来，通常k是不大于20的整数。最后选择k个最相似数据中出现次数最多的分类，作为新数据的分类。</p><hr><ul><li>下边是K-近邻算法的一个示例：</li></ul><ol><li>收集数据：提供文本文件。</li><li>准备数据：使用python解析文件。</li><li>分析数据：使用Matplotlib画二维扩散图</li><li>训练算法：</li><li>测试算法：以文件部分数据作为测试样本</li><li>使用算法：可以输入特征数据以判断是否正确</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">在文件datingTest中存放着某约会网站的样本数据，每个样本占据一行，共1000行。</span><br><span class="line">其中主要包括： 每年飞行里程数， 玩游戏所耗时间比， 每周消费的冰淇淋数。</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">from numpy import *</span><br><span class="line">import os</span><br><span class="line">import operator</span><br><span class="line">import matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from os import listdir</span><br><span class="line"></span><br><span class="line">def file2matrix(filename):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    处理输入格式</span><br><span class="line">    :param filename:</span><br><span class="line">    :return:</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    fr = open(filename)</span><br><span class="line">    numberOfLines = len(fr.readlines())       #得到文件行数</span><br><span class="line">    returnMat = zeros((numberOfLines,3))      #创建返回的NumPy矩阵</span><br><span class="line">    classLabelVector = []</span><br><span class="line">    fr = open(filename)</span><br><span class="line">    index = 0</span><br><span class="line">    for line in fr.readlines():                #解析文件数据到列表</span><br><span class="line">        line = line.strip()</span><br><span class="line">        listFromLine = line.split(&apos;\t&apos;)</span><br><span class="line">        returnMat[index,:] = listFromLine[0:3]</span><br><span class="line">        classLabelVector.append(int(listFromLine[-1]))</span><br><span class="line">        index += 1</span><br><span class="line">    return returnMat,classLabelVector</span><br><span class="line"></span><br><span class="line">def autoNorm(dataSet):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    将每列的最小值放在变量minVals中，最大值放在maxVals中，</span><br><span class="line">    其中dataSet.min（0）中的参数0使得函数可以从列中取最小值，而不是选取当前行最小值。</span><br><span class="line">    然后函数计算可能的取之范围，并创建新的矩阵返回</span><br><span class="line">    :param dataSet:</span><br><span class="line">    :return:</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    minVals = dataSet.min(0)</span><br><span class="line">    maxVals = dataSet.max(0)</span><br><span class="line">    ranges = maxVals - minVals</span><br><span class="line">    normDataSet = zeros(shape(dataSet))</span><br><span class="line">    m = dataSet.shape[0]</span><br><span class="line">    normDataSet = dataSet - tile(minVals, (m, 1))</span><br><span class="line">    normDataSet = normDataSet / tile(ranges, (m, 1))  #特征值相除</span><br><span class="line">    return normDataSet, ranges, minVals</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def classify0(inX, dataSet, labels, k):</span><br><span class="line">    dataSetSize = dataSet.shape[0]</span><br><span class="line"> #距离计算</span><br><span class="line">    diffMat = tile(inX, (dataSetSize,1)) - dataSet</span><br><span class="line">    sqDiffMat = diffMat**2</span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=1)</span><br><span class="line">    distances = sqDistances**0.5</span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    classCount=&#123;&#125;</span><br><span class="line">    for i in range(k):</span><br><span class="line">   #选择距离最小的k个点</span><br><span class="line">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1</span><br><span class="line">    #排序</span><br><span class="line">    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True)</span><br><span class="line">    return sortedClassCount[0][0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def datingClassTest():</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    使用file2matrix和autoNorm函数从文件中读取数据并转换为归一化特征值</span><br><span class="line">    接着计算测试向量的数量，决定normMat向量中哪些数据用于测试，哪些用于训练样本</span><br><span class="line">    然后将两部分数据输入到原始分类起函数classify0，</span><br><span class="line">    最后计算错误率并返回</span><br><span class="line">    :return:</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    hoRatio = 0.10</span><br><span class="line">    datingDataMat, datingLabels = file2matrix(&apos;datingTestSet.txt&apos;)</span><br><span class="line">    normMat, range, minvals = autoNorm(datingDataMat)</span><br><span class="line">    m = normMat.shape[0]</span><br><span class="line">    numTestVecs = int(m*hoRatio)</span><br><span class="line">    errorCount = 0.0</span><br><span class="line">    for i in range(numTestVecs):</span><br><span class="line">        classifierResult = classify0(normMat[i,:], normMat[numTestVecs:m, :], datingLabels[numTestVecs:m], 3)</span><br><span class="line">        print(&quot;the classifier came back with : %d, the real answer is : %d&quot; %(classifierResult, datingLabels[i]))</span><br><span class="line">        if(classifierResult != datingLabels[i]):</span><br><span class="line">            errorCount += 1.0</span><br><span class="line">    print(&quot;the total error rate is : %f&quot; %(errorCount/float(numTestVecs)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">datingClassTest()</span><br><span class="line">datingDataMat, datingLabels = file2matrix(&apos;datingTestSet2.txt&apos;)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(111)</span><br><span class="line">ax.scatter(datingDataMat[:,1], datingDataMat[:,2])</span><br><span class="line">ax.scatter(datingDataMat[:, 1], datingDataMat[:, 2], 15.0*array(datingLabels), 15.0*array(datingLabels))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python" scheme="http://gyunch.org/categories/Python/"/>
    
    
      <category term="机器学习" scheme="http://gyunch.org/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://gyunch.org/2016/08/19/Observer/"/>
    <id>http://gyunch.org/2016/08/19/Observer/</id>
    <published>2016-08-18T16:00:00.000Z</published>
    <updated>2018-05-31T13:39:43.653Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="观察者模式概述"><a href="#观察者模式概述" class="headerlink" title="观察者模式概述"></a><strong>观察者模式概述</strong></h2><ul><li><strong>观察者模式</strong>也被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</li></ul><hr><h2 id="观察者模式用处"><a href="#观察者模式用处" class="headerlink" title="观察者模式用处"></a><strong>观察者模式用处</strong></h2><ul><li>将一个系统分割成一个一些类相互协作的类有一个不好的副作用，那就是需要维护相关对象间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。观察者就是解决这类的耦合关系的。</li></ul><hr><h2 id="观察者模式角色"><a href="#观察者模式角色" class="headerlink" title="观察者模式角色"></a><strong>观察者模式角色</strong></h2><ol><li>抽象主题（Subject）：它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>具体主题（ConcreteSubject）：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。</li><li>抽象观察者（Observer）：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</li><li>具体观察者（ConcreteObserver）：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。</li></ol><p>以下是观察者模式的类图：<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frusyuo04ej30n30hiq4a.jpg" alt=" "></p><hr><h2 id="观察者模式实现"><a href="#观察者模式实现" class="headerlink" title="观察者模式实现"></a><strong>观察者模式实现</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">    /// 抽象主题类</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public abstract class Subject</span><br><span class="line">    &#123;</span><br><span class="line">        private List&lt;Observer&gt; observers = new List&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 增加观察者</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;observer&quot;&gt;&lt;/param&gt;</span><br><span class="line">        public void Attach(Observer observer)</span><br><span class="line">        &#123;</span><br><span class="line">            observers.Add(observer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 移除观察者</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;observer&quot;&gt;&lt;/param&gt;</span><br><span class="line">        public void Detach(Observer observer)</span><br><span class="line">        &#123;</span><br><span class="line">            observers.Remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 向观察者（们）发出通知</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public void Notify()</span><br><span class="line">        &#123;</span><br><span class="line">            foreach (Observer o in observers)</span><br><span class="line">            &#123;</span><br><span class="line">                o.Update();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 抽象观察者类，为所有具体观察者定义一个接口，在得到通知时更新自己</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public abstract class Observer</span><br><span class="line">    &#123;</span><br><span class="line">        public abstract void Update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 具体观察者或具体通知者，将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色通常用一个具体子类实现。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class ConcreteSubject : Subject</span><br><span class="line">    &#123;</span><br><span class="line">        private string subjectState;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 具体观察者的状态</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public string SubjectState</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return subjectState; &#125;</span><br><span class="line">            set &#123; subjectState = value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 具体观察者，实现抽象观察者角色所要求的更新接口，已是本身状态与主题状态相协调</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class ConcreteObserver : Observer</span><br><span class="line">    &#123;</span><br><span class="line">        private string observerState;</span><br><span class="line">        private string name;</span><br><span class="line">        private ConcreteSubject subject;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 具体观察者用一个具体主题来实现</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public ConcreteSubject Subject</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return subject; &#125;</span><br><span class="line">            set &#123; subject = value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public ConcreteObserver(ConcreteSubject subject, string name)</span><br><span class="line">        &#123;</span><br><span class="line">            this.subject = subject;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 实现抽象观察者中的更新操作</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public override void Update()</span><br><span class="line">        &#123;</span><br><span class="line">            observerState = subject.SubjectState;</span><br><span class="line">            Console.WriteLine(&quot;The observer&apos;s state of &#123;0&#125; is &#123;1&#125;&quot;, name, observerState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>观察者模式解除了主题和具体观察者的耦合，让耦合的双方都依赖于抽象，而不是依赖具体。从而使得各自的变化都不会影响另一边的变化。<br>但此例中依赖关系并未完全解除，抽象通知者依旧依赖抽象的观察者<br>在c#中的可以使用事件委托来彻底解除通知者和观察者之间的耦合。<br>委托：委托是一种引用方法的类型。一旦为委托分配了方法，委托将与该方法有相同的行为。委托方法可以像其它任何方法一样，具有参数和返回值。委托可以看作是对函数（方法）的的抽象，是函数的“类”，委托的实例代表一个（或多个）具体的函数，它可以是多播的。<br>事件：事件基于委托，为委托提供了一种发布/订阅机制。事件的订阅与取消与我们刚才讲的观察者模式中的订阅与取消类似，只是表现形式有所不同。在观察者模式中，订阅使用方法Attach（）来进行；在事件的订阅中使用“+=”。类似地，取消订阅在观察者模式中用Dettach（），而事件的取消用“-=”。  </p></blockquote><hr><h2 id="Unity中的观察者模式"><a href="#Unity中的观察者模式" class="headerlink" title="Unity中的观察者模式"></a>Unity中的观察者模式</h2><ul><li>在unity游戏开发中，最常用到的设计模式就是单例模式和观察者模式，在之上已经介绍了观察者模式，以下通过代码来直观的了解在unity中，观察者模式的简单使用。</li><li>RPG游戏中我们拥有自己的角色，角色通常拥有名称和等级，以下程序中通过观察者模式实现点击鼠标左键增加角色等级。</li></ul><blockquote><p>ShowPlayer.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 观察者</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class ShowPlayer : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    public PlayerData mHero;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //设置通知者</span><br><span class="line">    public void SetData(PlayerData player)&#123;</span><br><span class="line">        mHero = player;</span><br><span class="line">        //事件绑定</span><br><span class="line">        mHero.Register(Show);</span><br><span class="line">        Show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Show()&#123;</span><br><span class="line">        print(&quot;Hero&apos;s name &quot; + mHero.name);</span><br><span class="line">        print(&quot;Hero&apos;s rank &quot; + mHero.Rank);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>PlayerData.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 数据类</span><br><span class="line">/// 通知者</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class PlayerData : SubjestBase &#123;</span><br><span class="line"></span><br><span class="line">    public string name;</span><br><span class="line">    private string rank;</span><br><span class="line">    public string Rank&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            return rank;</span><br><span class="line">        &#125;</span><br><span class="line">        set&#123;</span><br><span class="line">            rank = value;</span><br><span class="line">            Notified();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>SubjestBase.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 通知者基类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class SubjestBase &#123;</span><br><span class="line">    private event Action eventHander;</span><br><span class="line">    //注册事件</span><br><span class="line">    public void Register(Action func)&#123;</span><br><span class="line">        eventHander += func;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //删除事件</span><br><span class="line">    public void UnRegister(Action func)&#123;</span><br><span class="line">        eventHander -= func;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //发送通知</span><br><span class="line">    public void Notified()&#123;</span><br><span class="line">        if(eventHander != null)&#123;</span><br><span class="line">            eventHander();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>PlayerSelectCtrl.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 控制器</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class PlayerSelectCtrl : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    private ShowPlayer showPlayer;</span><br><span class="line">    private PlayerData player;</span><br><span class="line"></span><br><span class="line">void Start () &#123;</span><br><span class="line">        showPlayer = GetComponentInChildren&lt;ShowPlayer&gt;();</span><br><span class="line">        player = User.GetPlayer();</span><br><span class="line">        showPlayer.SetData(player);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //数据更新</span><br><span class="line">void Update () &#123;</span><br><span class="line">        if(Input.GetMouseButtonDown(0))&#123;</span><br><span class="line">            player.Rank = (int.Parse(player.Rank) + 1).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>User.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class User&#123;</span><br><span class="line"></span><br><span class="line">    public static PlayerData GetPlayer()&#123;</span><br><span class="line">        PlayerData player = new PlayerData();</span><br><span class="line">        player.name = &quot;Yu&quot;;</span><br><span class="line">        player.Rank = &quot;7&quot;;</span><br><span class="line">        return player;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="设计模式" scheme="http://gyunch.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>FSM状态机</title>
    <link href="http://gyunch.org/2016/08/15/FSM/"/>
    <id>http://gyunch.org/2016/08/15/FSM/</id>
    <published>2016-08-14T16:00:00.000Z</published>
    <updated>2018-06-26T07:43:41.288Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><ul><li>有限状态机，FSM，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的模型。</li><li>在unity中我们经常会判断一个人物（或怪物）的运动状态，如巡逻、追逐、攻击、死亡等，然后作出相应的操作，这些时候我们可以使用有限状态机来集中管理这些状态。</li><li>为了解决上述问题，我们经常会使用fsm有限状态机、分层有限状态机以及行为树，这里我们主要了解fsm有限状态机</li><li>FSM在unity中算是一个比较重要的技巧</li></ul><blockquote><p>以下是我写的一个简单的FSM状态机的例子：<br>FSMState.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine.SceneManagement;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class FSMState &#123;</span><br><span class="line">//字典，字典中每一项都记录了一个“转换-状态”对 的信息</span><br><span class="line">protected Dictionary&lt;Transition, FSMStateID&gt; map = new Dictionary&lt;Transition, FSMStateID&gt;();</span><br><span class="line">//状态编号ID</span><br><span class="line">protected FSMStateID stateID;</span><br><span class="line">public FSMStateID ID &#123; get &#123; return stateID; &#125; &#125;</span><br><span class="line">//目标点位置</span><br><span class="line">protected Vector3 destPos;</span><br><span class="line">//巡逻点数组</span><br><span class="line">protected Transform[] waypoints;</span><br><span class="line">//旋转速度</span><br><span class="line">protected float curRotSpeed;</span><br><span class="line">//移动速度</span><br><span class="line">protected float curSpeed;</span><br><span class="line">//发现对面的距离</span><br><span class="line">public float chaseDistance&#123;</span><br><span class="line">get &#123;</span><br><span class="line">return 10f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//攻击距离</span><br><span class="line">public float SRAttackDistance&#123;</span><br><span class="line">get &#123;</span><br><span class="line">return 1f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//目标点距离</span><br><span class="line">protected float arriveDistance&#123;</span><br><span class="line">get &#123;</span><br><span class="line">return 2f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 向字典添加项，每项是一个&quot;转换--状态&quot;对</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;transition&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">public void AddTransition(Transition transition, FSMStateID id)</span><br><span class="line">&#123;</span><br><span class="line">if (map.ContainsKey(transition))</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">map.Add(transition, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 从字典中删除项</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;trans&quot;&gt;&lt;/param&gt;</span><br><span class="line">public void DeleteTransition(Transition trans)</span><br><span class="line">&#123;</span><br><span class="line">if (map.ContainsKey(trans))</span><br><span class="line">&#123;</span><br><span class="line">map.Remove(trans);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 通过查询字典，确定在当前状态下，发生trans转换时，应该转换到新的状态编号并返回</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;trans&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public FSMStateID GetOutputState(Transition trans)</span><br><span class="line">&#123;</span><br><span class="line">return map[trans];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 用来确定是否需要转换到其他状态，应该发生哪个转换</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;player&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;npc&quot;&gt;&lt;/param&gt;</span><br><span class="line">public abstract void Reason(Transform hero, Transform monster);</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 定义了在本状态的角色行为，移动，动画等</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;player&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;npc&quot;&gt;&lt;/param&gt;</span><br><span class="line">public abstract void Act(Transform hero, Transform monster);</span><br><span class="line"></span><br><span class="line">public virtual void Enter (Transform hero, Transform monster)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 选择随机逻辑点</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public void FindNextPoint()&#123;</span><br><span class="line">int rndIndex = Random.Range (0, waypoints.Length);</span><br><span class="line">Vector3 rndPosition = Vector3.zero;</span><br><span class="line">destPos = waypoints [rndIndex].position + rndPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>FSM.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">public class FSM : MonoBehaviour&#123;</span><br><span class="line">// 玩家位置</span><br><span class="line">protected Transform playerTranform;</span><br><span class="line">// 下一个巡逻点</span><br><span class="line">protected Vector3 destPos;</span><br><span class="line">// 巡逻点表单</span><br><span class="line">protected GameObject[] pointList;</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">protected float elapsedTime;</span><br><span class="line"></span><br><span class="line">protected virtual void Initialize()&#123;&#125;</span><br><span class="line">protected virtual void FSMUpdate()&#123;&#125;</span><br><span class="line">protected virtual void FSMFixedUpdate()&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">void Start()&#123;</span><br><span class="line">Initialize ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//循环执行 </span><br><span class="line">void Update()&#123;</span><br><span class="line">FSMUpdate ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void FixedUpdate()&#123;</span><br><span class="line">FSMFixedUpdate ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>AdvancedFSM.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public enum Transition&#123;</span><br><span class="line">SawPlayer = 0, //是否看到玩家</span><br><span class="line">ReachPlayer, //接近玩家</span><br><span class="line">LostPlayer, //玩家离开视线</span><br><span class="line">NoHealth, //死亡</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public enum FSMStateID&#123;</span><br><span class="line">Patrolling = 0, // 巡逻编号</span><br><span class="line">Chasing, // 追踪编号</span><br><span class="line">Attacking,</span><br><span class="line">Dead, // 死亡编号</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class AdvancedFSM : FSM</span><br><span class="line">&#123;</span><br><span class="line">//FSM中的所有状态组成的列表</span><br><span class="line">private List&lt;FSMState&gt; fsmStates;</span><br><span class="line">//当前状态的编号</span><br><span class="line">private FSMStateID currentStateID;</span><br><span class="line">public FSMStateID CurrentStateID &#123; get &#123; return currentStateID; &#125; &#125;</span><br><span class="line">//当前状态</span><br><span class="line">private FSMState currentState;</span><br><span class="line">public FSMState CurrentState &#123; get &#123; return currentState; &#125; &#125;</span><br><span class="line"></span><br><span class="line">public AdvancedFSM()</span><br><span class="line">&#123;</span><br><span class="line">//新建一个空的状态列表</span><br><span class="line">fsmStates = new List&lt;FSMState&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">///向状态列表中加入一个新的状态</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public void AddFSMState(FSMState fsmState)</span><br><span class="line">&#123;</span><br><span class="line">if (fsmState == null)</span><br><span class="line">&#123;</span><br><span class="line">Debug.LogError(&quot;状态为空&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (fsmStates.Count == 0)</span><br><span class="line">&#123;</span><br><span class="line">fsmStates.Add(fsmState);</span><br><span class="line">currentState = fsmState;</span><br><span class="line">currentStateID = fsmState.ID;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach (FSMState state in fsmStates)</span><br><span class="line">&#123;</span><br><span class="line">if (state.ID == fsmState.ID)</span><br><span class="line">&#123;</span><br><span class="line">Debug.LogError(&quot;状态已存在&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//如果要加入的状态不在列表中，将它加入列表</span><br><span class="line">fsmStates.Add(fsmState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//从状态中删除一个状态   </span><br><span class="line">public void DeleteState(FSMStateID fsmState)</span><br><span class="line">&#123;</span><br><span class="line">// 搜索整个状态列表，如果要删除的状态在列表中，那么将它移除，否则报错</span><br><span class="line">foreach (FSMState state in fsmStates)</span><br><span class="line">&#123;</span><br><span class="line">if (state.ID == fsmState)</span><br><span class="line">&#123;</span><br><span class="line">fsmStates.Remove(state);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Debug.LogError(&quot;要删除的状态不在列表中&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 根据当前状态，和参数中传递的转换，转换到新状态</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public void PerformTransition(Transition trans)</span><br><span class="line">&#123;  </span><br><span class="line">FSMStateID id = currentState.GetOutputState(trans);        </span><br><span class="line">      </span><br><span class="line">currentStateID = id;</span><br><span class="line"></span><br><span class="line">foreach (FSMState state in fsmStates)</span><br><span class="line">&#123;</span><br><span class="line">if (state.ID == currentStateID)</span><br><span class="line">&#123;</span><br><span class="line">currentState = state;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>AttackState.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class AttackState : FSMState &#123;</span><br><span class="line"></span><br><span class="line">Animator monsterAnimator;</span><br><span class="line">AnimatorStateInfo stateInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public AttackState(Transform[] wp)&#123;</span><br><span class="line">waypoints = wp;</span><br><span class="line">stateID = FSMStateID.Attacking;</span><br><span class="line"></span><br><span class="line">curRotSpeed = 12;</span><br><span class="line">curSpeed = 100;</span><br><span class="line"></span><br><span class="line">FindNextPoint ();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override void Enter (Transform hero, Transform monster)</span><br><span class="line">&#123;</span><br><span class="line">monsterAnimator = monster.GetComponent&lt;Animator&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override void Reason(Transform hero, Transform monster)&#123;</span><br><span class="line">if (hero != null) &#123;</span><br><span class="line">stateInfo = monsterAnimator.GetCurrentAnimatorStateInfo (0);</span><br><span class="line">float dist = Vector3.Distance (monster.position, hero.position);</span><br><span class="line">if (dist &gt;= SRAttackDistance &amp;&amp; dist &lt; chaseDistance) &#123;</span><br><span class="line">if (stateInfo.IsName (&quot;skill&quot;) &amp;&amp; stateInfo.normalizedTime % 1 &gt; 0.9f)</span><br><span class="line">monster.GetComponent&lt;MonsterAIController&gt; ().SetTransition (Transition.SawPlayer);</span><br><span class="line">&#125; else if (dist &gt;= chaseDistance) &#123;</span><br><span class="line">if (stateInfo.IsName (&quot;skill&quot;) &amp;&amp; stateInfo.normalizedTime % 1 &gt; 0.9f)</span><br><span class="line">monster.GetComponent&lt;MonsterAIController&gt; ().SetTransition (Transition.LostPlayer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">monster.GetComponent&lt;MonsterAIController&gt; ().SetTransition (Transition.LostPlayer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public override void Act(Transform hero, Transform monster)&#123;</span><br><span class="line">destPos = hero.position;</span><br><span class="line">Quaternion targetRotation = Quaternion.LookRotation (destPos - monster.position);</span><br><span class="line">monster.rotation = Quaternion.Slerp (monster.rotation, targetRotation, Time.deltaTime * curRotSpeed);</span><br><span class="line"></span><br><span class="line">//CharacterController controller = monster.GetComponent&lt;CharacterController&gt; ();</span><br><span class="line">//controller.SimpleMove (monster.transform.forward * Time.deltaTime * curSpeed);</span><br><span class="line"></span><br><span class="line">//播放攻击动画</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ChaseState.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine.AI;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line">public class ChaseState : FSMState &#123;</span><br><span class="line"></span><br><span class="line">NavMeshAgent monsterAgent;</span><br><span class="line">Animator monsterAnimator;</span><br><span class="line"></span><br><span class="line">public ChaseState(Transform[] wp)&#123;</span><br><span class="line">waypoints = wp;</span><br><span class="line">stateID = FSMStateID.Chasing;</span><br><span class="line"></span><br><span class="line">curRotSpeed = 7;</span><br><span class="line">curSpeed = 300;</span><br><span class="line"></span><br><span class="line">FindNextPoint ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public override void Enter (Transform hero, Transform monster)</span><br><span class="line">&#123;</span><br><span class="line">monsterAnimator = monster.GetComponent&lt;Animator&gt;();</span><br><span class="line">monsterAgent = monster.GetComponent&lt;NavMeshAgent&gt; ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override void Reason(Transform hero, Transform monster)&#123;</span><br><span class="line"></span><br><span class="line">if (hero != null) &#123;</span><br><span class="line">destPos = hero.position;</span><br><span class="line">float dist = Vector3.Distance (monster.position, destPos);</span><br><span class="line">if (dist &lt;= SRAttackDistance) &#123;</span><br><span class="line">AudioManager.Instance.PlayFXAudio (&quot;Sound_MonsterPatrolPlayer&quot;, monster.transform.position);</span><br><span class="line">monster.GetComponent&lt;MonsterAIController&gt; ().SetTransition (Transition.ReachPlayer);</span><br><span class="line"></span><br><span class="line">&#125; else if (dist &gt;= chaseDistance) &#123;</span><br><span class="line">monster.GetComponent&lt;MonsterAIController&gt; ().SetTransition (Transition.LostPlayer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">monster.GetComponent&lt;MonsterAIController&gt; ().SetTransition (Transition.LostPlayer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public override void Act(Transform hero, Transform monster)&#123;</span><br><span class="line">destPos = hero.position;</span><br><span class="line">Quaternion targetRotation = Quaternion.LookRotation (destPos - monster.position);</span><br><span class="line">monster.rotation = Quaternion.Slerp (monster.rotation, targetRotation, Time.deltaTime * curRotSpeed);</span><br><span class="line">monsterAgent.SetDestination (destPos);</span><br><span class="line">monster.GetComponent&lt;NavMeshAgent&gt; ().speed = 2;</span><br><span class="line">//播放奔跑动画</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>PatrolState.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine.AI;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line">public class PatrolState : FSMState&#123;</span><br><span class="line"></span><br><span class="line">Animator monsterAnimator;</span><br><span class="line">NavMeshAgent monsterAgent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public PatrolState(Transform[] wp)&#123;</span><br><span class="line">waypoints = wp;</span><br><span class="line">stateID = FSMStateID.Patrolling;</span><br><span class="line">curRotSpeed = 6;</span><br><span class="line">curSpeed = 200;</span><br><span class="line"></span><br><span class="line">FindNextPoint ();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override void Enter (Transform hero, Transform monster)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override void Reason(Transform hero, Transform monster)&#123;</span><br><span class="line">if (hero != null) &#123;</span><br><span class="line">if (Vector3.Distance (monster.position, hero.position) &lt;= chaseDistance) &#123;</span><br><span class="line">AudioManager.Instance.PlayFXAudio (&quot;Sound_MonsterSawPlayer&quot;, monster.transform.position);</span><br><span class="line">monster.GetComponent&lt;MonsterAIController&gt; ().SetTransition (Transition.SawPlayer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public override void Act(Transform hero, Transform monster)&#123;</span><br><span class="line">monsterAgent = monster.GetComponent&lt;NavMeshAgent&gt; ();</span><br><span class="line">if (!(monsterAgent.pathPending || monsterAgent.remainingDistance &gt; (monsterAgent.stoppingDistance + 0.5f) || monsterAgent.velocity != Vector3.zero)) &#123;</span><br><span class="line">FindNextPoint ();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//Physics.SphereCastAll ();</span><br><span class="line">//Quaternion targetRotation = Quaternion.LookRotation (destPos - monster.position);</span><br><span class="line">//monster.rotation = Quaternion.Slerp (monster.rotation, targetRotation, Time.deltaTime * curRotSpeed);</span><br><span class="line">monsterAgent.SetDestination (destPos);</span><br><span class="line">monster.GetComponent&lt;NavMeshAgent&gt; ().speed = 1;</span><br><span class="line">//播放行走动画</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>DeadState.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.AI;</span><br><span class="line"></span><br><span class="line">public class DeadState : FSMState &#123;</span><br><span class="line">public DeadState()&#123;</span><br><span class="line">stateID = FSMStateID.Dead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override void Enter (Transform hero, Transform monster)</span><br><span class="line">&#123;</span><br><span class="line">monster.GetComponent&lt;NavMeshAgent&gt; ().enabled = false;</span><br><span class="line">monster.GetComponent&lt;Collider&gt; ().enabled = false;</span><br><span class="line">GameManager.Instance.AddScore ();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public override void Reason(Transform hero, Transform monster)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public override void Act (Transform hero, Transform monster)&#123;</span><br><span class="line"></span><br><span class="line">//播放死亡动画</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>MonsterAIController.css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class MonsterAIController : AdvancedFSM &#123;</span><br><span class="line">private Transform objHero;</span><br><span class="line">protected override void Initialize()&#123;</span><br><span class="line">//初始化血量、刚体等</span><br><span class="line">//CurrentState.Enter (playerTranform, transform);</span><br><span class="line">//实现有限状态机</span><br><span class="line">ConstructFSM ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected override void FSMUpdate()&#123;</span><br><span class="line">elapsedTime += Time.deltaTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected override void FSMFixedUpdate()&#123;</span><br><span class="line">if (objHero == null) &#123;</span><br><span class="line">if (FindTarget.FindHero (this.transform, radiu).Length == 1) &#123;</span><br><span class="line">objHero = FindTarget.FindHero (this.transform, radiu) [0].transform;</span><br><span class="line">&#125; else if (FindTarget.FindHero (this.transform, radiu).Length &gt; 1) &#123;</span><br><span class="line">for (int i = 0; i &lt; FindTarget.FindHero (this.transform, radiu).Length - 1; i++) &#123;</span><br><span class="line">objHero = Vector3.Distance (this.transform.position, FindTarget.FindHero (this.transform, radiu) [i].transform.position) &lt; Vector3.Distance (this.transform.position, FindTarget.FindHero (this.transform, radiu) [i + 1].transform.position) ? FindTarget.FindHero (this.transform, radiu) [i].transform : FindTarget.FindHero (this.transform, radiu) [i + 1].transform;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//Transform objHero = FindTarget.FindEnemy (out hit, this.transform, radiu, maxDistance);</span><br><span class="line">playerTranform = objHero;</span><br><span class="line">CurrentState.Reason (playerTranform, this.transform);</span><br><span class="line">CurrentState.Act (playerTranform, this.transform);</span><br><span class="line"></span><br><span class="line">private void ConstructFSM()&#123;</span><br><span class="line">pointList = GameObject.FindGameObjectsWithTag (&quot;PatrolPoint&quot;);</span><br><span class="line">Transform[] waypoints = new Transform[pointList.Length];</span><br><span class="line">int k = 0;</span><br><span class="line">foreach (GameObject obj in pointList) &#123;</span><br><span class="line">waypoints [k] = obj.transform;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">//吧对应的状态加入字典</span><br><span class="line">//巡逻</span><br><span class="line">PatrolState patrol = new PatrolState (waypoints);</span><br><span class="line">//发现玩家，并追踪</span><br><span class="line">patrol.AddTransition(Transition.SawPlayer, FSMStateID.Chasing);</span><br><span class="line">patrol.AddTransition (Transition.NoHealth, FSMStateID.Dead);</span><br><span class="line"></span><br><span class="line">//追踪</span><br><span class="line">ChaseState chase = new ChaseState(waypoints);</span><br><span class="line">//丢失玩家，转为巡逻</span><br><span class="line">chase.AddTransition(Transition.LostPlayer, FSMStateID.Patrolling);</span><br><span class="line">//接近后攻击</span><br><span class="line">chase.AddTransition(Transition.ReachPlayer, FSMStateID.Attacking);</span><br><span class="line">chase.AddTransition (Transition.NoHealth, FSMStateID.Dead);</span><br><span class="line"></span><br><span class="line">//攻击</span><br><span class="line">AttackState attack = new AttackState (waypoints);</span><br><span class="line">attack.AddTransition (Transition.LostPlayer, FSMStateID.Patrolling);</span><br><span class="line">attack.AddTransition (Transition.SawPlayer, FSMStateID.Chasing);</span><br><span class="line">attack.AddTransition (Transition.NoHealth, FSMStateID.Dead);</span><br><span class="line"></span><br><span class="line">//死亡</span><br><span class="line">DeadState dead = new DeadState();</span><br><span class="line">dead.AddTransition (Transition.NoHealth, FSMStateID.Dead);</span><br><span class="line"></span><br><span class="line">AddFSMState (patrol);</span><br><span class="line">AddFSMState (chase);</span><br><span class="line">AddFSMState (attack);</span><br><span class="line">AddFSMState (dead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 设置状态转移</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;t&quot;&gt;T.&lt;/param&gt;</span><br><span class="line">public void SetTransition(Transition t)&#123;</span><br><span class="line">PerformTransition (t);</span><br><span class="line">CurrentState.Enter(playerTranform , transform);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="设计模式" scheme="http://gyunch.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Unity对象池</title>
    <link href="http://gyunch.org/2016/08/10/unityObject%20pool/"/>
    <id>http://gyunch.org/2016/08/10/unityObject pool/</id>
    <published>2016-08-09T16:00:00.000Z</published>
    <updated>2018-05-23T10:00:31.547Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><ul><li>对象池的含义很简单，我们将对象储存在一个“池”中，当需要它时可以重复使用，而不是创建一个新的对象，尽可能的复用内存中已经驻留的资源来减少频繁的IO耗时操作。有经验的开发者在程序设计时就会做一个规范，其中包含了角色池，怪物池，特效池，经验池等。</li><li>以下代码中是一个简单的对象池示例，具体的说明在代码注释中呈现：</li></ul><blockquote><p>Singleton.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 单例模版类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class Singleton&lt;T&gt; where T : new() &#123;</span><br><span class="line">    private static readonly T instance = new T();</span><br><span class="line"></span><br><span class="line">    public static T Instance&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>MonoSingleton.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 组建单例模版</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class MonoSingleten&lt;T&gt; : MonoBehaviour where T : MonoBehaviour&#123;</span><br><span class="line">    private static T instance;</span><br><span class="line">    public static T Instance&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            if (instance == null)&#123;</span><br><span class="line">                GameObject go = new GameObject(typeof(T).Name);</span><br><span class="line">                instance = go.AddComponent&lt;T&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            instance = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected virtual void Awake()&#123;</span><br><span class="line">        Instance = this as T;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>IReusable.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 对象池接口</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public interface IReusable&#123;</span><br><span class="line">    //对象从对象池实例化的回调</span><br><span class="line">    void OnSpawned();</span><br><span class="line">    //对象返回对象池后的回调</span><br><span class="line">    void OnUnSpawned();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>PrefabType.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public enum PrefabType&#123;</span><br><span class="line">    None = 0,</span><br><span class="line">    Effects = 1,</span><br><span class="line">    Roles = 2,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ResourcesPath.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 资源路径</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class ResourcesPath &#123;</span><br><span class="line">    public const string prefabRoles = &quot;Prefabs/Roles/&quot;;</span><br><span class="line">    public const string prefabEffects = &quot;Prefabs/Effects/&quot;;</span><br><span class="line"></span><br><span class="line">    public static string GetPath(PrefabType type, string name)&#123;</span><br><span class="line">        string path = string.Empty;</span><br><span class="line">        switch(type)&#123;</span><br><span class="line">            case PrefabType.Effects:</span><br><span class="line">                path = ResourcesPath.prefabEffects + name;</span><br><span class="line">                break;</span><br><span class="line">            case PrefabType.Roles:</span><br><span class="line">                path = ResourcesPath.prefabRoles + name;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ResourceFactory.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 资源工厂</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class ResourceFactory : Singleton&lt;ResourceFactory&gt; &#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 加载资源</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;returns&gt;The load.&lt;/returns&gt;</span><br><span class="line">    /// &lt;param name=&quot;path&quot;&gt;Path.&lt;/param&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;T&quot;&gt;The 1st type parameter.&lt;/typeparam&gt;</span><br><span class="line">    public T Load&lt;T&gt;(string path) where T : Object&#123;</span><br><span class="line">        T res = Resources.Load&lt;T&gt;(path);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ObjectPoolMananger.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 对象池管理器</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class ObjectPoolMananger : MonoSingleten&lt;ObjectPoolMananger&gt; &#123;</span><br><span class="line">    private Dictionary&lt;string, ObjectPool&gt; mPools = new Dictionary&lt;string, ObjectPool&gt;();</span><br><span class="line"></span><br><span class="line">    //从对象池取出对象</span><br><span class="line">    public GameObject Spawn(PrefabType type, string name, Vector3 pos = default(Vector3), Quaternion rotation = default(Quaternion), Transform parent = null)&#123;</span><br><span class="line">        ObjectPool pool = null;</span><br><span class="line">        if (!mPools.ContainsKey(name))&#123;</span><br><span class="line">            //创建对象池</span><br><span class="line">            RegisterPoll(type, name);</span><br><span class="line">        &#125;</span><br><span class="line">        pool = mPools[name];</span><br><span class="line">        //从对象池中取出一个物体</span><br><span class="line">        GameObject obj = pool.Spawn();</span><br><span class="line"></span><br><span class="line">        obj.transform.SetParent(parent);</span><br><span class="line">        obj.transform.localPosition = pos;</span><br><span class="line">        obj.transform.localRotation = rotation;</span><br><span class="line">        return obj;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 对象池回收物体</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;obj&quot;&gt;Object.&lt;/param&gt;</span><br><span class="line">    public void UnSpawn(GameObject obj)&#123;</span><br><span class="line">        foreach(ObjectPool pool in mPools.Values)&#123;</span><br><span class="line">            if (pool.Contains(obj))&#123;</span><br><span class="line">                pool.UnSpawn(obj);</span><br><span class="line">                return ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Destroy(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 回收所有物体</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public void UnSpwanAll()&#123;</span><br><span class="line">        foreach(ObjectPool pool in mPools.Values)&#123;</span><br><span class="line">            pool.UnSpawnAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private void RegisterPoll(PrefabType type, string name)&#123;</span><br><span class="line">        string path = ResourcesPath.GetPath(type, name);</span><br><span class="line">        GameObject prefab = ResourceFactory.Instance.Load&lt;GameObject&gt;(path);</span><br><span class="line">        ObjectPool pool = new ObjectPool(prefab);</span><br><span class="line">        mPools.Add(name, pool);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ObjectPool.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 对象池类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class ObjectPool&#123;</span><br><span class="line">    //预制体</span><br><span class="line">    private GameObject mPrefab;</span><br><span class="line">    //对象池</span><br><span class="line">    private List&lt;GameObject&gt; objectlist = new List&lt;GameObject&gt;();</span><br><span class="line"></span><br><span class="line">    //构造方法</span><br><span class="line">    public ObjectPool(GameObject prefab)&#123;</span><br><span class="line">        this.mPrefab = prefab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 取出物体</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;returns&gt;The spawn.&lt;/returns&gt;</span><br><span class="line">    public GameObject Spawn()&#123;</span><br><span class="line">        GameObject obj = null;</span><br><span class="line">        for (int i = 0; i &lt; objectlist.Count; i++)&#123;</span><br><span class="line">            if (!objectlist[i].activeSelf)&#123;//如果有物体隐藏</span><br><span class="line">                obj = objectlist[i];</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (obj == null)&#123;</span><br><span class="line">            obj = GameObject.Instantiate(mPrefab);</span><br><span class="line">            objectlist.Add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        obj.SetActive(true);</span><br><span class="line"></span><br><span class="line">        //获取对象池接口</span><br><span class="line">        IReusable reusable = obj.GetComponent&lt;IReusable&gt;();</span><br><span class="line">        if (reusable != null)&#123;</span><br><span class="line">            reusable.OnSpawned();</span><br><span class="line">        &#125;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 回收物体</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;obj&quot;&gt;Object.&lt;/param&gt;</span><br><span class="line">    public void UnSpawn(GameObject obj)&#123;</span><br><span class="line">        obj.SetActive(false);</span><br><span class="line">        IReusable reusable = obj.GetComponent&lt;IReusable&gt;();</span><br><span class="line">        if (reusable != null)&#123;</span><br><span class="line">            reusable.OnUnSpawned();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void UnSpawnAll() &#123;</span><br><span class="line">        foreach (GameObject obj in objectlist)&#123;</span><br><span class="line">            obj.SetActive(false);</span><br><span class="line">            IReusable reusable = obj.GetComponent&lt;IReusable&gt;();</span><br><span class="line">            if (reusable != null)&#123;</span><br><span class="line">                reusable.OnUnSpawned();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 判断物体是否存在</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;returns&gt;The contains.&lt;/returns&gt;</span><br><span class="line">    /// &lt;param name=&quot;obj&quot;&gt;Object.&lt;/param&gt;</span><br><span class="line">    public bool Contains(GameObject obj)&#123;</span><br><span class="line">        return objectlist.Contains(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>DestoryObjectPool.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 对象池销毁</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class DestoryObjectPool : MonoBehaviour, IReusable &#123;</span><br><span class="line">    public float mDestoryTime = 0.1f;</span><br><span class="line"></span><br><span class="line">    public void OnSpawned()</span><br><span class="line">    &#123;</span><br><span class="line">        Invoke(&quot;UnSpawn&quot;, mDestoryTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnUnSpawned()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void UnSpawn()&#123;</span><br><span class="line">        ObjectPoolMananger.Instance.UnSpawn(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="设计模式" scheme="http://gyunch.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Unity单例</title>
    <link href="http://gyunch.org/2016/08/07/UnitySingleton/"/>
    <id>http://gyunch.org/2016/08/07/UnitySingleton/</id>
    <published>2016-08-06T16:00:00.000Z</published>
    <updated>2018-05-23T09:54:37.712Z</updated>
    
    <content type="html"><![CDATA[<p>🤔</p><hr><a id="more"></a><h2 id="什么是单例"><a href="#什么是单例" class="headerlink" title="什么是单例"></a>什么是单例</h2><ul><li>单例模式是开发中运用最广泛的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</li><li>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</li><li>其中要注意：</li></ul><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><hr><h2 id="为什么要使用单例"><a href="#为什么要使用单例" class="headerlink" title="为什么要使用单例"></a>为什么要使用单例</h2><ul><li>在我们的整个游戏生命周期当中，有很多对象从始至终有且只有一个。这个唯一的实例只需要生成一次，并且直到游戏结束才需要销毁。</li><li>单例模式一般应用于管理器类，或者是一些需要持久化存在的对象。</li></ul><hr><h2 id="单例的实现"><a href="#单例的实现" class="headerlink" title="单例的实现"></a>单例的实现</h2><blockquote><p>c#单例的实现(如果在unity中不需要使用monobeheviour，也可以这样来创建单例)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Singleton </span><br><span class="line">&#123; </span><br><span class="line">   private static volatile Singleton instance; </span><br><span class="line">   private static object syncRoot = new Object(); </span><br><span class="line">   public static Singleton Instance </span><br><span class="line">   &#123; </span><br><span class="line">      get  </span><br><span class="line">      &#123; </span><br><span class="line">         if (instance == null)  </span><br><span class="line">         &#123; </span><br><span class="line">            lock (syncRoot)  </span><br><span class="line">            &#123; </span><br><span class="line">               if (instance == null)  </span><br><span class="line">                  instance = new Singleton(); </span><br><span class="line">            &#125; </span><br><span class="line">         &#125; </span><br><span class="line">         return instance; </span><br><span class="line">      &#125; </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>unity需要使用monobeheviour的单例实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public sealed class SingletonMoBehaviour: MonoBehaviour</span><br><span class="line">&#123; </span><br><span class="line">    private static volatile SingletonBehaviour instance; </span><br><span class="line">    private static object syncRoot = new Object(); </span><br><span class="line">    public static SingletonBehaviour Instance </span><br><span class="line">    &#123; </span><br><span class="line">        get  </span><br><span class="line">        &#123; </span><br><span class="line">            if (instance == null)  </span><br><span class="line">            &#123; </span><br><span class="line">                lock (syncRoot)  </span><br><span class="line">                &#123; </span><br><span class="line">                    if (instance == null)  &#123;</span><br><span class="line">                        SingletonBehaviour[] instances = FindObjectsOfType&lt;SingletonBehaviour&gt;();</span><br><span class="line">                        if (instances != null)&#123;</span><br><span class="line">                            for (var i = 0; i &lt; instances.Length; i++) &#123;</span><br><span class="line">                                Destroy(instances[i].gameObject);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        GameObject go = new GameObject(&quot;_SingletonBehaviour&quot;);</span><br><span class="line">                        instance = go.AddComponent&lt;SingletonBehaviour&gt;();</span><br><span class="line">                        DontDestroyOnLoad(go); </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">            return instance; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>其中主要区别在于monobeheviour不能使用构造函数进行实例化，只能挂载到GameObject上，而切换场景时当前场景的GameObject都会被销毁，所以单例也会被销毁，这里我们就需要DontDestroyOnLoad处理，同时为了保持场景当中只有一个实例，我们要对当前场景中的单例进行判断，如果存在其他的实例，则应该将其全部删除。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://gyunch.org/categories/Unity/"/>
    
    
      <category term="设计模式" scheme="http://gyunch.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
