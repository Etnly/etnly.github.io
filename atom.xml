<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Etnly&#39;s Blog</title>
  
  <subtitle>Hello,World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/child/"/>
  <updated>2018-05-15T11:46:49.190Z</updated>
  <id>http://yoursite.com/child/</id>
  
  <author>
    <name>Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python面向对象</title>
    <link href="http://yoursite.com/child/2016/06/03/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/child/2016/06/03/Python面向对象/</id>
    <published>2016-06-02T16:00:00.000Z</published>
    <updated>2018-05-15T11:46:49.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python面向对象"><a href="#Python面向对象" class="headerlink" title="Python面向对象"></a><strong>Python面向对象</strong></h1><p>🤔</p><hr><h2 id="面向对象的编程"><a href="#面向对象的编程" class="headerlink" title="面向对象的编程"></a><strong>面向对象的编程</strong></h2><ul><li>类与对象是面向对象编程的两个主要方面。一个类能够创建一种新的类型 ，其中对象就是类的实例。可以这样来类比:你可以拥有类型 int 的变量，也就是说存储整数的变量是 int 类的实例。<blockquote><p>即使是整数也会被视为对象。这不同于 C++ 与c#，在它们那儿整数是原始内置类型  </p></blockquote></li><li><strong>在Python中，一切皆为对象</strong>。</li><li>对象可以使用属于它的普通变量来存储数据。这种从属于对象或类的变量叫作字段 。对象还可以使用属于类的函数来实现某些功能，这种函数叫作类的方法 。这两个术语很重要，它有助于我们区分函数与变量，哪些是独立的，哪些又是属于类或对象的。总之，字段与方法通称类的属性。</li><li>字段有两种类型——它们属于某一类的各个实例或对象，或是从属于某一类本身。它们被分别称作实例变量与类变量。</li></ul><hr><h2 id="self"><a href="#self" class="headerlink" title="self"></a><strong>self</strong></h2><ul><li>类方法与普通函数只有一种特定的区别——前者必须有一个额外的名字，这个名字必须添加到参数列表的开头，但是你不用在你调用这个功能时为这个参数赋值，Python 会为它提供。 这种特定的变量引用的是对象本身，按照惯例，它被赋􏰀 self 这一名称<blockquote><p>Python 中的 self 相当于 C++ 中的指针以及 Java 与 C# 中的 this 指针。  </p></blockquote></li></ul><hr><h2 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h2><ul><li>这是一个最简单的类：<br><code>class Person:</code><br><code>pass   #空的代码块</code><br><code>p = Person()  #创建Person的对象p</code></li></ul><hr><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h2><ul><li>一个简单的方法：<br><code>class Person:</code><br>  <code>def sayHi(self):</code><pre><code>`print(‘Hello, World’)`</code></pre><code>p = Person()</code><br><code>p.sayHi()</code><br>输出:<code>Hello, World</code><blockquote><p>唯一与函数不同的地方在于这里多了一个self  </p></blockquote></li></ul><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h2><ul><li>面向对象编程的一大优点是对代码的重用，重用的一种实现方法就是通过继承机制。继承指的是根据一个现有的类型，定义一个修改版本的新类的能力。继承最好是想象成在类之间实现类型与子类型关系的工具。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class SchoolMember: &apos;&apos;&apos;代表任何学校里的成员。&apos;&apos;&apos;</span><br><span class="line">def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        print(&apos;(Initialized SchoolMember: &#123;&#125;)&apos;.format(self.name))</span><br><span class="line">def tell(self):</span><br><span class="line">&apos;&apos;&apos;告诉我有关我的细节。&apos;&apos;&apos;</span><br><span class="line">print(&apos;Name:&quot;&#123;&#125;&quot; Age:&quot;&#123;&#125;&quot;&apos;.format(self.name, self.age), end=&quot; &quot;)</span><br><span class="line">class Teacher(SchoolMember): &apos;&apos;&apos;代表一位老师。&apos;&apos;&apos;</span><br><span class="line">def __init__(self, name, age, salary):</span><br><span class="line">        SchoolMember.__init__(self, name, age)</span><br><span class="line">        self.salary = salary</span><br><span class="line">        print(&apos;(Initialized Teacher: &#123;&#125;)&apos;.format(self.name))</span><br><span class="line">    def tell(self):</span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print(&apos;Salary: &quot;&#123;:d&#125;&quot;&apos;.format(self.salary))</span><br><span class="line">class Student(SchoolMember): &apos;&apos;&apos;代表一位学生。&apos;&apos;&apos;</span><br><span class="line">def __init__(self, name, age, marks):</span><br><span class="line">        SchoolMember.__init__(self, name, age)</span><br><span class="line">        self.marks = marks</span><br><span class="line">        print(&apos;(Initialized Student: &#123;&#125;)&apos;.format(self.name))</span><br><span class="line">    def tell(self):</span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print(&apos;Marks: &quot;&#123;:d&#125;&quot;&apos;.format(self.marks))</span><br><span class="line">t = Teacher(&apos;Mrs. Shrividya&apos;, 40, 30000)</span><br><span class="line">s = Student(&apos;Swaroop&apos;, 25, 75)</span><br><span class="line"># 打印一行空白行 print()</span><br><span class="line">members = [t, s]</span><br><span class="line">for member in members:</span><br><span class="line"># 对全体师生工作 member.tell()</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>有一些特征是他们都具有的，例如姓名、年龄和地址。另外一些特征是他们独有的，一如教师的薪水、课程与假期，学生的成绩和学费。你可以为每一种类型创建两个独立的类，并对它们进行处理。但增添一条共有特征就意味着将其添加进两个独立的类。这很快就会使程序变得笨重。<br>一个更好的方法是创建一个公共类叫作 SchoolMember ，然后让教师和学生从这个类中继承 ，也就是说他们将成为这一类型(类)的子类型，而我们就可以向这些子类型中添加某些该类独有的特征。<br>这种方法有诸多优点。如果我们增加或修改了 SchoolMember 的任何功能，它将自动反映在子类型中。举个例子，你可以通过简单地向 SchoolMember 类进行操作，来为所有老师与学生添加一条新的 ID 卡字段。不过，对某一子类型作出的改动并不会影响到其它子类型。另一大优点是你可以将某一老师或学生对象看作 SchoolMember 的对象并加以引用，这在某些情况下会大为有用，例如清点学校中的成员数量。这被称作多态性(Polymorphism)，在任何情 况下，如果父类型希望，子类型都可以被替换，也就是说，该对象可以被看作父类的实例。<br>同时还需要注意的是我们重用父类的代码，但我们不需要再其它类中重复它们，当我们使用独立类型时才会必要地重复这些代码。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python面向对象&quot;&gt;&lt;a href=&quot;#Python面向对象&quot; class=&quot;headerlink&quot; title=&quot;Python面向对象&quot;&gt;&lt;/a&gt;&lt;strong&gt;Python面向对象&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;面
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/child/categories/Python/"/>
    
    
      <category term="OOP" scheme="http://yoursite.com/child/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Python数据结构</title>
    <link href="http://yoursite.com/child/2016/06/01/Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/child/2016/06/01/Python数据结构/</id>
    <published>2016-05-31T16:00:00.000Z</published>
    <updated>2018-05-15T11:46:34.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python数据结构"><a href="#Python数据结构" class="headerlink" title="Python数据结构"></a><strong>Python数据结构</strong></h1><p>🤔</p><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h2><ul><li><strong>字符串</strong>是字符的序列，可以使用单引号、双引号及三引号来指定字符串<br><code>name = &#39;etnly&#39;</code><br><code>name = &quot;etnly&quot;</code><br><code>#两者工作机制完全相同</code><br><code>&#39;&#39;&#39;这是一个多行字符串</code><br><code>这是第二行</code><br><code>这位是第三行&#39;&#39;&#39;</code><blockquote><p>在程序中使用的所有字符串都是str类下的对象，并且它也具有自己的方法，具体的方法清单可以查阅<code>help(str)</code>。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#返回字符串长度</span><br><span class="line">name = &apos;etnly&apos;</span><br><span class="line">len(name)</span><br><span class="line">#遍历字符串</span><br><span class="line">name = &apos;etnly&apos;</span><br><span class="line">for i in name:</span><br><span class="line">    print(i)</span><br><span class="line">#字符串切片</span><br><span class="line">print(name[1:3])</span><br><span class="line">#输出 tn</span><br><span class="line">#</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h2><ul><li><strong>列表</strong>是一种用于保存一系列有序项目的集合，也就是说，你可以利用列表保存一串项目的序列。和字符串类似，在字符串中这些项目是字符，而列表中它可以是任何类型，列表中的值称为<em>元素</em>。</li><li>创建列表最简单的方式是使用 [] 方括号：<br><code>num = [1, 2, 3]</code><br><code>name = [&#39;张三&#39;, &#39;李四&#39;]</code><br><code>other = [[1, 2, 3], &#39;a&#39;, &#39;b&#39; 3.0]</code><blockquote><p>字符串的值是不可变的，而列表的值是可变的。如：<br><code>num[1] = 3</code><br><code>print(num)</code><br>输出：<br><code>[1, 3, 3]</code><br>列表对象也有自己的方法，具体可以查阅<code>help(list)</code>。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#列表遍历</span><br><span class="line">num = [1, 2, 3]</span><br><span class="line">for i in num:</span><br><span class="line">    print(i)</span><br><span class="line">#列表拼接</span><br><span class="line">num2 = [2, 3, 4]</span><br><span class="line">num3 = num + num2</span><br><span class="line">#列表切片</span><br><span class="line">print(num3[1:3])</span><br><span class="line">#这里输出 [2, 3]</span><br><span class="line">#添加元素</span><br><span class="line">num.append(4)</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a><strong>字典</strong></h2><ul><li>字典类似于列表，但更加通用，在列表中下表必须是整数，而字典中，下标基本可以是任意类型。</li><li>字典包含键（下标）和值。每一个键都关联一个值，这种方式称为键值对，字典体现了键到值的映射，所以可以说每一个键映射到一个值。</li><li>新建一个字典可以：<br><code>d = {&#39;a&#39; : 1, &#39;b&#39; : 2, &#39;c&#39; : 3}</code><br><code>d = dict() #新建一个空字典</code></li></ul><blockquote><p>字典是通过散列表的方式实现的，意味着键必须是可散列的。<br>散列是一个函数，接收值并返回一个整数，字典使用这些被称为散列值的整数来保存和查找键值对。  </p></blockquote><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a><strong>元组</strong></h2><ul><li>元组用于将多个对象保存到一起，其值可以是任何类型，并按照下标索引，元组和列表非常相似，其二者主要区别在于，元组是不可变的。元组通常用于保证某一语句或某一用户定义的函数可以安全地采用一组数值。</li><li>元组语法上用逗号分隔一列值，可以用括号括起来：<br><code>t = &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2</code><br><code>t = (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2)</code><blockquote><p>用括号括起来单独的值如<code>t = (&#39;a&#39;)</code>并不是元组，如要新建元组可以使用内置函数tuple<br><code>t = tuple()</code></p></blockquote></li></ul><blockquote><p>严格的来说函数只能返回一个值，但如果返回的是元组，就可以达到类似返回多个值的效果。  </p></blockquote><h3 id="元组、列表和字典"><a href="#元组、列表和字典" class="headerlink" title="元组、列表和字典"></a><strong>元组、列表和字典</strong></h3><h4 id="列表和元组"><a href="#列表和元组" class="headerlink" title="列表和元组"></a>列表和元组</h4><ul><li>zip函数，接收两个或多个序列，并返回一个元组列表，每个元组包含来自每个序列的一个元素。<br><code>a = &#39;abc&#39;</code><br><code>b = [0, 1, 2]</code><br><code>print(zip(a, b))</code><br>结果返回<code>&lt;zip object at 0x10d5e1b08&gt;</code><blockquote><p>这是一个zip对象，它知道如何遍历每个元素对，zip对象是一种迭代器，即用来迭代访问一个序列的对象  </p></blockquote></li><li><p>使用zip最常见的方法是在for循环中：<br><code>for i in zip(a, b):</code><br>  <code>print(i)</code><br>输出：<code>(&#39;a&#39;, 0) (&#39;b&#39;, 1) (&#39;c&#39;, 2)</code></p></li><li><p>如果需要使用列表的操作，可以利用zip对象制作一个列表：<br><code>list(zip(a, b))</code></p></li></ul><h4 id="字典和元组"><a href="#字典和元组" class="headerlink" title="字典和元组"></a>字典和元组</h4><ul><li>字典方法items可以返回一个元组序列，其中每个元组是一个键值对：<br><code>d = {0 : &#39;a&#39;, 1 : &#39;b&#39;, 2 : &#39;c&#39;}</code><br><code>t = d.items()</code><br><code>print(t)</code><br>输出：<code>dict_items([(0, &#39;a&#39;), (1, &#39;b&#39;), (2, ‘c’)])</code></li><li>反过来可以使用元组列表来初始化一个字典：<br><code>t = [(0, &#39;a&#39;), (1, &#39;b&#39;), (2, ‘c’)]</code><br><code>d = dict(t)</code></li><li>我们可以通过dict和items得到一个简洁的创建新字典的方法：<br><code>d = dict(zip(&#39;abc&#39;, range(3)))</code></li></ul><hr><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a><strong>序列</strong></h2><ul><li>列表、元组和字符串可以看作序列(Sequence)的某种表现形式，序列的主要功能是资格测试(也就是 in 与 not in 表达式)和索引操作，它们能够允许我们直接获取序列中的特定项目。</li></ul><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><ul><li>当你创建了一个对象并将其分配给某个变量时，变量只会查阅某个对象，并且它也 不会代表对象本身。也就是说，变量名只是指向你计算机内存中存储了相应对象的那一部分。这叫作将名称绑定给那一个对象。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python数据结构&quot;&gt;&lt;a href=&quot;#Python数据结构&quot; class=&quot;headerlink&quot; title=&quot;Python数据结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;Python数据结构&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;字
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/child/categories/Python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/child/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(2)</title>
    <link href="http://yoursite.com/child/2016/05/30/Python%E5%9F%BA%E7%A1%80(2)/"/>
    <id>http://yoursite.com/child/2016/05/30/Python基础(2)/</id>
    <published>2016-05-29T16:00:00.000Z</published>
    <updated>2018-05-15T11:46:16.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础-2"><a href="#Python基础-2" class="headerlink" title="Python基础(2)"></a><strong>Python基础(2)</strong></h1><p>🤔</p><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><ul><li><strong>函数</strong>是指可重复使用的程序片段。它们允许你为某个代码块赋􏰀名字，允许你通过这一特殊的名字在你的程序任何地方来运行代码块，并可重复任何次数。这就是所谓的调用函数。<br>函数可以通过关键字 def 来定义：</li></ul><p><code>def say():</code><br>    <code>print(&#39;Hello, World&#39;)</code><br><code>say()</code></p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a><strong>函数参数</strong></h3><ul><li>函数可以获取参数，这个参数的值由你所提供，借此，函数便可以利用这些值来做一些事情。这些参数与变量类似，这些变量的值在我们调用函数时已被定义，且在函数运行时均已赋值完成。在定义函数 时给定的名称称作“形参”，在调用函数时你所提供给函数的值称作“实参”。</li></ul><p><code>def reaArea(a, b):</code><br>    <code>s = a * b</code><br>    <code>return s</code><br><code>x = 10</code><br><code>y = 5</code><br><code>print(reaArea(x, y))</code></p><blockquote><p>以上为计算机型面积的函数，调用reaArea函数时，我们以变量作为实参来调用函数，使得x的值赋给行参a、y的值赋给行参b，并返回两者的乘积。  </p></blockquote><ul><li><p>函数参数可以设置默认参数值，如：<br><code>def reaArea(a , b = 5):</code></p></li><li><p>有时可能想定义的函数里面能够有任意数量的变量，也就是参数数量是可变的，这可以通 过使用星号来实现<br><code>def func(a = 7, *b, **c):</code><br>  <code>print(&#39;a&#39;, a)</code><br>  <code>for i in b:</code></p><pre><code>`print(&apos;b&apos;, i)`</code></pre><p>  <code>for key, value in c.items():</code></p><pre><code>`print(key, value)`</code></pre><p><code>func(10, 9, 8, 7, 6, 5, x = 1, y = 2, z = 3)</code><br>输出：<br><code>a 10   b 9   b 8   b 7   b 6   b 5   x 1   y 2   z 3</code></p><blockquote><p>当声明一个如*a 星号参数时，从此处开始直到结束的所有位置参数都将被收集并汇集成一个元组。<br>类似地，当声明一个诸如 **b 的双星号参数时，从此处开始直至结束的所有关键字参数都将被收集并汇集成一个字典。  </p></blockquote></li></ul><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a><strong>局部变量</strong></h3><ul><li>在一个函数的定义中声明变量时，它们不会以任何方式与处于函数之外但具有相同名称的变量产生关系，也就是说，这些变量名只存在于函数这一局部。这被称为变量的作用域。所有变量的作用域是它们被定义的块，从定义它们的名字的定义点开始。<br><code>n = 7</code><br><code>def func(n):</code><br>  <code>print(&quot;1:&quot;, n)</code><br>  <code>n = 10</code><br>  <code>print(&quot;2:&quot;, n)</code><br><code>func(n)</code><br><code>print(&quot;3:&quot;, n)</code><br>输出：<br><code>1: 7     2: 10     3: 7</code><blockquote><p>第一次打印出存在于函数块第一行名为 n 的值时，使用的是在函数声明之上的主代码块中声明的这一参数的值。<br>接着，将10赋值给n。n是我们这一函数的局部变量。因此，当改变函数中n的值的时候，主代码块中的n则不会受到影响。<br>最后一句 print 语句，打印出主代码块中定义的n的值，由此确认它不受先前调用的函数中的局部变量的影响。  </p></blockquote></li></ul><h3 id="global语句"><a href="#global语句" class="headerlink" title="global语句"></a><strong>global语句</strong></h3><ul><li>如果想给一个在程序顶层的变量赋值(也就是说它不存在于任何作用域中，无论是函数还是类)，那么你必须告诉程序这一变量并非局部的，而是全局的。我们需要通过global语句来完成这件事。因为在不使用global语句的情况下，不可能为一个定义于函数之外的变量赋值。<br><code>n = 7</code><br><code>def func():</code><br>  <code>global n</code><br>  <code>print(&quot;1:&quot;, n)</code><br>  <code>n = 10</code><br>  <code>print(&quot;2:&quot;, n)</code><br><code>func()</code><br><code>print(&quot;3:&quot;, n)</code><br>输出：<br><code>1: 7     2: 10     3: 10</code><blockquote><p>global语句用以声明n是一个全局变量，因此，当我们在函数中为n进行赋值时，这一改动将影响到我们在主代码块中使用的n的值  </p></blockquote></li></ul><h3 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a><strong>return 语句</strong></h3><ul><li>return 语句用于从函数中返回，也就是中断函数。我们也可以选择在中断函数时从函数中返回一个值。<br><code>def reaArea(a, b):</code><br>  <code>s = a * b</code><br>  <code>return s</code><br><code>x = 10</code><br><code>y = 5</code><br><code>print(reaArea(x, y))</code><blockquote><p>如果 return 语句没有搭配任何一个值则代表着返回 None 。 None 在 Python 中一个特殊的类型，代表空。  </p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础-2&quot;&gt;&lt;a href=&quot;#Python基础-2&quot; class=&quot;headerlink&quot; title=&quot;Python基础(2)&quot;&gt;&lt;/a&gt;&lt;strong&gt;Python基础(2)&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/child/categories/Python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/child/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(1)</title>
    <link href="http://yoursite.com/child/2016/05/27/Python%E5%9F%BA%E7%A1%80(1)/"/>
    <id>http://yoursite.com/child/2016/05/27/Python基础(1)/</id>
    <published>2016-05-26T16:00:00.000Z</published>
    <updated>2018-05-15T11:51:35.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础-1"><a href="#Python基础-1" class="headerlink" title="Python基础(1)"></a><strong>Python基础(1)</strong></h1><p>🤔</p><hr><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a><strong>赋值</strong></h2><ul><li><strong>赋值语句</strong>可以创建新的变量，并为其赋值：<pre><code>say = &apos;Hello, World&apos;num = 7</code></pre><blockquote><p>第一个语句将<strong>字符串</strong>赋给“say”变量；第二个语句将17赋给num。  </p></blockquote></li></ul><hr><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a><strong>表达式</strong></h2><ul><li><strong>表达式</strong>是变量、值、操作符的组合，单独的值与变量也被看作一个表达式</li></ul><hr><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a><strong>语句</strong></h2><ul><li><strong>语句</strong>是一段可以产生效果的代码单元，如创建一个变量或显示一个值：<pre><code>`say = &apos;Hello, World&apos;``print(say)`</code></pre><blockquote><p>print语句显示say的值  </p></blockquote></li></ul><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><ul><li><p>Python中注释以“#”开头：</p><pre><code>`# 这里是注释``say = &apos;Hello, World&apos;``print(say) #输出say的值`</code></pre></li></ul><blockquote><p>如上所示，注释可以单独占一行，也可以加入到代码结尾。  </p></blockquote><hr><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a><strong>控制流</strong></h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><strong>if语句</strong></h3><ul><li><strong>if语句</strong>用以检查条件:如果 条件为真(True)，我们将运行一块语句(if 块)，否则 我们将运行另一块语句(else 块)。else 从句是可选 的。</li></ul><p><code>num = 7</code><br><code>if num &gt; 0:</code><br>      <code>print(&#39;num为正数&#39;)</code><br><code>elif num == 0:</code><br>      <code>print(&#39;num等于0&#39;)</code><br><code>else:</code><br>     <code>print(&#39;num为负数&#39;)</code></p><p>此处输出：<br><code>num为正数</code></p><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a><strong>for语句</strong></h3><ul><li>for…in 语句是循环语句的一种，其特点是会在一系列对象上进行迭代，意即它会遍历序列中的每一个项目。</li></ul><p><code>for i in range(1, 10):</code><br>    <code>print(i)</code><br><code>else:</code><br>      <code>print(&#39;循环结束&#39;)</code></p><p>此处输出：<br><code>1 2 3 4 5 6 7 8 9 循环结束</code></p><blockquote><p>for 循环就会在(1-9)这一范围内展开递归—— for i in range(1,10) 等价于 for i in [1，2，3， 4，5，6，7，8，9] ，这个操作将依次将队列里的每个数字(或是对象)分配给 i ，一次一个，然后以 每个 i 的值执行语句块<br>else 部分是可选的。当循环中包含他时，它总会在 for 循环结束后开始执 行，除非程序遇到了 break 语句。  </p></blockquote><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a><strong>while语句</strong></h3><ul><li>while 语句能够让你在条件为真的前提下重复执行某块语句。 while 语句也是 一种循环语句。 while 语句同样可以拥有 else 子句作为可选选项。</li></ul><p><code>num = 7</code><br><code>isRun = True</code><br><code>while    isRun:</code><br>     <code>if num == 0:</code><br>          <code>isRun = False</code><br>      <code>else:</code><br>          <code>num = num - 1</code><br><code>else:</code><br>      <code>print(num)</code></p><p>此处输出：<br><code>0</code></p><blockquote><p>While会在循环开始前检查变量是否为true，之后再执行相应的 while 块，直到变量为false，循环结束。  </p></blockquote><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a><strong>break语句</strong></h3><ul><li>break 语句用以中断循环语句，也就是中止循环语句的执行，即使循环条件没有变更为 False ，或队列中的项目尚未完全迭代依旧如此。</li></ul><p><code>for i in range(1, 10):</code><br>      <code>print(i)</code><br>      <code>if i == 3:</code><br>          <code>break</code><br><code>else:</code><br>      <code>print(&#39;循环结束&#39;)</code></p><p>此处输出：<br><code>1 2 3</code></p><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a><strong>continue语句</strong></h3><ul><li>continue 语句用以告诉 Python 跳过当前循环块中的剩余语句，并继续该循环的下一次迭代。<br><code>while True:</code><br>  <code>s = input(&#39;请输入名字&#39;)</code><br>  <code>if s == &#39;yu&#39;:</code><pre><code>`break`</code></pre>  <code>if len(s) &lt; 2:</code><pre><code>`print(&apos;请输入至少两个字符&apos;)``continue`</code></pre>  <code>print(&#39;名字为&#39;, s)</code></li></ul><blockquote><p>此处接收用户输入的内容，只有字符串长度大于等于2程序才会对其进行处理。如果其长度小 于 2，便通过使用 continue 语句跳过代码块中的其余语句。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础-1&quot;&gt;&lt;a href=&quot;#Python基础-1&quot; class=&quot;headerlink&quot; title=&quot;Python基础(1)&quot;&gt;&lt;/a&gt;&lt;strong&gt;Python基础(1)&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;🤔&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/child/categories/Python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/child/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello,world</title>
    <link href="http://yoursite.com/child/2015/07/23/Hello,World/"/>
    <id>http://yoursite.com/child/2015/07/23/Hello,World/</id>
    <published>2015-07-22T16:00:00.000Z</published>
    <updated>2018-05-14T14:11:03.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="One"><a href="#One" class="headerlink" title="One"></a><strong>One</strong></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;One&quot;&gt;&lt;a href=&quot;#One&quot; class=&quot;headerlink&quot; title=&quot;One&quot;&gt;&lt;/a&gt;&lt;strong&gt;One&lt;/strong&gt;&lt;/h1&gt;
      
    
    </summary>
    
      <category term="介绍" scheme="http://yoursite.com/child/categories/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="Hello" scheme="http://yoursite.com/child/tags/Hello/"/>
    
  </entry>
  
</feed>
